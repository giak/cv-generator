---
description: "TOUJOURS appliquer lors de l'INITIALISATION d'un projet Git pour GARANTIR configurations optimales"
globs: ".git/config"
alwaysApply: false
---
---
title: "Git Configuration Best Practices"
version: "1.1.0"
description: "TOUJOURS appliquer lors de l'INITIALISATION d'un projet Git pour GARANTIR configurations optimales"
globs: ".git/config"
alwaysApply: false
priority: 75
compatibility: ">=0.45"
lastUpdated: "2024-05-30"
tags: ["git", "configuration", "best-practices", "workflow"]
---

# üõ†Ô∏è Configuration Git Optimale

## üìã Vue d'Ensemble
Cette r√®gle d√©finit les configurations Git optimales recommand√©es par les d√©veloppeurs core de Git. Elle garantit que les projets b√©n√©ficient des meilleures configurations Git en termes d'UX, de performance et de workflow.

> ‚ö†Ô∏è **Attention**: Ces configurations modifient certains comportements par d√©faut de Git pour les am√©liorer selon les recommandations des d√©veloppeurs Git.

## üéØ Objectifs
- Optimiser l'exp√©rience utilisateur Git par d√©faut
- Standardiser les configurations Git √† travers les projets
- R√©duire les frictions dans les workflows quotidiens
- Int√©grer les meilleures pratiques des d√©veloppeurs core de Git
- Am√©liorer la lisibilit√© et la pertinence des op√©rations Git

## üìÅ Niveaux de Configuration Git

Git utilise trois niveaux de configuration, stock√©s dans diff√©rents fichiers:

1. **Niveau syst√®me** (`/etc/gitconfig`)
   - Affecte tous les utilisateurs du syst√®me
   - Modifi√© avec `git config --system`
   - Requiert des privil√®ges administrateur

2. **Niveau utilisateur** (`~/.gitconfig` ou `~/.config/git/config`)
   - Sp√©cifique √† l'utilisateur courant
   - Modifi√© avec `git config --global`
   - ‚úÖ **Recommand√©** pour les configurations standardis√©es

3. **Niveau projet** (`.git/config` dans le d√©p√¥t)
   - Sp√©cifique au d√©p√¥t courant uniquement
   - Modifi√© avec `git config --local` (d√©faut sans option)
   - Prioritaire sur les autres niveaux

> üí° **Note**: Les commandes de cette r√®gle utilisent `--global` pour modifier le fichier `~/.gitconfig`, ce qui applique les configurations √† tous les projets de l'utilisateur.

## ‚úÖ Configurations Essentielles

### 1Ô∏è‚É£ Am√©liorations √âvidentes
```bash
# Affichage et tri
git config --global column.ui auto
git config --global branch.sort -committerdate
git config --global tag.sort version:refname

# Branch par d√©faut
git config --global init.defaultBranch main

# Am√©liorations de diff
git config --global diff.algorithm histogram
git config --global diff.colorMoved plain
git config --global diff.mnemonicPrefix true
git config --global diff.renames true

# Push et fetch intelligents
git config --global push.default simple
git config --global push.autoSetupRemote true
git config --global push.followTags true
git config --global fetch.prune true
git config --global fetch.pruneTags true
```

### 2Ô∏è‚É£ Fonctionnalit√©s Utiles
```bash
# Correction automatique
git config --global help.autocorrect prompt

# Commit verbeux
git config --global commit.verbose true

# R√©utilisation des r√©solutions de conflits
git config --global rerere.enabled true
git config --global rerere.autoupdate true

# Ignorer global
git config --global core.excludesfile ~/.gitignore

# Rebase am√©lior√©
git config --global rebase.autoSquash true
git config --global rebase.autoStash true
git config --global rebase.updateRefs true
```

### 3Ô∏è‚É£ Options Optionnelles (selon pr√©f√©rence)
```bash
# Moniteur de syst√®me de fichiers (pour grands repos)
# git config --global core.fsmonitor true
# git config --global core.untrackedCache true

# Style de conflit am√©lior√©
# git config --global merge.conflictstyle zdiff3

# Pull avec rebase par d√©faut
# git config --global pull.rebase true
```

## üìÑ Impl√©mentation du fichier ~/.gitconfig

La m√©thode recommand√©e pour appliquer ces configurations est de modifier le fichier `~/.gitconfig`. Voici comment proc√©der:

### 1Ô∏è‚É£ Sauvegarde du fichier existant

Avant toute modification, sauvegardez votre configuration actuelle:

```bash
cp ~/.gitconfig ~/.gitconfig.backup-$(date +%Y%m%d)
```

### 2Ô∏è‚É£ Mise en place du fichier

Vous pouvez cr√©er ou modifier ce fichier de deux fa√ßons:

#### Option 1: Utiliser les commandes git config

Ex√©cutez toutes les commandes `git config --global` list√©es dans les sections pr√©c√©dentes. Ces commandes modifient automatiquement le fichier `~/.gitconfig`.

#### Option 2: √âdition directe du fichier

Cr√©ez ou modifiez directement le fichier `~/.gitconfig` avec ce contenu:

```ini
[column]
    ui = auto
[branch]
    sort = -committerdate
[tag]
    sort = version:refname
[init]
    defaultBranch = main
[diff]
    algorithm = histogram
    colorMoved = plain
    mnemonicPrefix = true
    renames = true
[push]
    default = simple
    autoSetupRemote = true
    followTags = true
[fetch]
    prune = true
    pruneTags = true
[help]
    autocorrect = prompt
[commit]
    verbose = true
[rerere]
    enabled = true
    autoupdate = true
[core]
    excludesfile = ~/.gitignore
    editor = vim
    # Pour Windows:
    # autocrlf = true
    # Pour MacOS/Linux:
    # autocrlf = input
[rebase]
    autoSquash = true
    autoStash = true
    updateRefs = true
```

### 3Ô∏è‚É£ V√©rification de la configuration

Pour v√©rifier que les configurations ont √©t√© correctement appliqu√©es:

```bash
git config --list --show-origin | grep -v credential
```

## üîß Application du Script

Pour appliquer toutes les configurations essentielles, ex√©cutez le script suivant :

```bash
#!/bin/bash

# Sauvegarde de la configuration existante
if [ -f ~/.gitconfig ]; then
    cp ~/.gitconfig ~/.gitconfig.backup-$(date +%Y%m%d)
    echo "‚úÖ Configuration existante sauvegard√©e dans ~/.gitconfig.backup-$(date +%Y%m%d)"
fi

# Am√©liorations √âvidentes
git config --global column.ui auto
git config --global branch.sort -committerdate
git config --global tag.sort version:refname
git config --global init.defaultBranch main
git config --global diff.algorithm histogram
git config --global diff.colorMoved plain
git config --global diff.mnemonicPrefix true
git config --global diff.renames true
git config --global push.default simple
git config --global push.autoSetupRemote true
git config --global push.followTags true
git config --global fetch.prune true
git config --global fetch.pruneTags true

# Fonctionnalit√©s Utiles
git config --global help.autocorrect prompt
git config --global commit.verbose true
git config --global rerere.enabled true
git config --global rerere.autoupdate true
git config --global core.excludesfile ~/.gitignore
git config --global rebase.autoSquash true
git config --global rebase.autoStash true
git config --global rebase.updateRefs true

echo "‚úÖ Configurations Git optimales appliqu√©es avec succ√®s"
echo "üìÑ Les configurations ont √©t√© enregistr√©es dans ~/.gitconfig"
```

## üí° Exemples et Explications

### Tri des branches par date r√©cente
<example>
# Avant: branches affich√©es par ordre alphab√©tique
$ git branch
  feature-a
  feature-b
  master

# Apr√®s: branches tri√©es par date de commit la plus r√©cente
$ git branch
  feature-b     # Dernier commit il y a 1 heure
  feature-a     # Dernier commit il y a 2 jours
  master        # Dernier commit il y a 1 semaine
</example>

### Tri des tags par version s√©mantique
<example>
# Avant: tri alphab√©tique probl√©matique
$ git tag
nightly/0.5.1
nightly/0.5.10
nightly/0.5.2

# Apr√®s: tri s√©mantique correct
$ git tag
nightly/0.5.1
nightly/0.5.2
nightly/0.5.10
</example>

### Algorithme de diff am√©lior√©
<example>
# L'algorithme histogram offre une d√©tection plus intelligente des changements
# et des d√©placements de blocs de code, am√©liorant la lisibilit√© des diffs
# lors des revues de code et des merge conflicts.

# Exemple de diff√©rence entre myers (d√©faut) et histogram:
# Myers peut montrer un code d√©plac√© comme supprim√© puis ajout√© ailleurs
# Histogram peut reconna√Ætre que le bloc a √©t√© d√©plac√© intact
</example>

### Push automatique avec remote setup
<example>
# Avant: erreur lors du premier push d'une nouvelle branche
$ git push
fatal: The current branch feature-x has no upstream branch.

# Apr√®s: configuration automatique du remote lors du premier push
$ git push
Branch 'feature-x' set up to track remote branch 'feature-x' from 'origin'.
</example>

### Rebase avec auto-stash et auto-squash
<example>
# Utilisation de commit --fixup
$ git commit --fixup HEAD~2
$ git rebase -i HEAD~3

# Avec rebase.autoSquash=true, les commits fixup seront automatiquement 
# positionn√©s correctement lors du rebase interactif sans √©dition manuelle

# Avec rebase.autoStash=true, les modifications non commit√©es seront 
# automatiquement stash√©es avant le rebase puis r√©appliqu√©es apr√®s
</example>

### Exemple de fichier ~/.gitconfig complet
<example>
# ~/.gitconfig
[user]
    name = John Doe
    email = john.doe@example.com
[column]
    ui = auto
[branch]
    sort = -committerdate
[tag]
    sort = version:refname
[init]
    defaultBranch = main
[diff]
    algorithm = histogram
    colorMoved = plain
    mnemonicPrefix = true
    renames = true
[push]
    default = simple
    autoSetupRemote = true
    followTags = true
[fetch]
    prune = true
    pruneTags = true
[help]
    autocorrect = prompt
[commit]
    verbose = true
[rerere]
    enabled = true
    autoupdate = true
[core]
    excludesfile = ~/.gitignore
    editor = vim
    # Pour Windows:
    # autocrlf = true
    # Pour MacOS/Linux:
    # autocrlf = input
[rebase]
    autoSquash = true
    autoStash = true
    updateRefs = true
</example>

<example type="invalid">
# Configuration obsol√®te ou non-optimale:

# Ne pas utiliser le mode standard (non-simple) pour push
git config --global push.default matching

# Ne pas d√©sactiver le nettoyage des r√©f√©rences lors du fetch
git config --global fetch.prune false

# Ne pas utiliser l'ancien algorithme diff par d√©faut
# (myers est plus rapide mais moins pr√©cis)
git config --global diff.algorithm myers

# Ne pas garder les branches supprim√©es sur le remote
# (accumulation de r√©f√©rences mortes)
git config --global fetch.prune false

# Ne pas √©diter directement .git/config pour des configurations globales
# car elles ne s'appliqueront qu'au projet courant
vim .git/config
</example>

## ‚ö†Ô∏è Points Critiques

<critical>
- TOUJOURS utiliser la configuration `diff.algorithm histogram` pour des diffs plus intelligents, elle est plus pr√©cise avec un impact minimal sur les performances
- √âVITER de configurer `pull.rebase true` si l'√©quipe n'est pas famili√®re avec le rebase (peut causer de la confusion)
- PR√âF√âRER activer `fetch.prune` et `fetch.pruneTags` pour √©viter l'accumulation de r√©f√©rences obsol√®tes
- TOUJOURS configurer `init.defaultBranch` pour standardiser les noms de branches par d√©faut
- ACTIVER `push.autoSetupRemote` pour √©liminer les erreurs de premier push sans upstream
- UTILISER `~/.gitconfig` (niveau global) pour les configurations d'√©quipe standardis√©es plut√¥t que `.git/config` (niveau local)
- SAUVEGARDER le fichier `~/.gitconfig` existant avant de le modifier massivement
</critical>

## ‚úÖ Bonnes Pratiques

- **Standardisation**: Appliquer ces configurations globalement pour tous les d√©veloppeurs
- **Documentation**: Inclure ces configurations dans la documentation d'onboarding
- **Adaptation**: Ajuster les configurations optionnelles selon les besoins sp√©cifiques de l'√©quipe
- **√âvolution**: Mettre √† jour ces configurations au fur et √† mesure que Git √©volue
- **Formation**: Former l'√©quipe aux fonctionnalit√©s avanc√©es comme rerere ou autosquash
- **Partage**: Fournir un script d'installation ou un fichier `.gitconfig` mod√®le pour l'√©quipe
- **Configuration par couche**: Utiliser le niveau syst√®me pour les standards d'entreprise, le niveau utilisateur pour les pr√©f√©rences d'√©quipe, et le niveau local pour les exceptions sp√©cifiques au projet

## üîó R√©f√©rences
- [How Core Git Developers Configure Git](mdc:https:/blog.gitbutler.com/how-git-core-devs-configure-git)
- [Pro Git Book - Git Configuration](mdc:https:/git-scm.com/book/en/v2/Customizing-Git-Git-Configuration)
- [Git Documentation - git-config](mdc:https:/git-scm.com/docs/git-config)
- [Atlassian Git Config Tutorial](mdc:https:/www.atlassian.com/git/tutorials/setting-up-a-repository/git-config)

<version>1.1.0</version> 