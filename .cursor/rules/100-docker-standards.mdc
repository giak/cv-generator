---
description: ENFORCE Docker standards and best practices for containerization in CV Generator application to ensure consistent, maintainable, and secure deployment
globs: ["Dockerfile*", "docker-compose*.yml", ".docker/**/*", "*.sh"]
alwaysApply: false
---
---
description: ENFORCE Docker standards and best practices for containerization in CV Generator application to ensure consistent, maintainable, and secure deployment
globs: ["Dockerfile*", "docker-compose*.yml", ".docker/**/*", "*.sh"]
tags: [docker, containerization, deployment, infrastructure, devops]
priority: 1
version: 1.0.0
---

# Docker Standards and Best Practices

> Enforce Docker standards for consistent, maintainable, and secure deployment of CV Generator application

## Metadata

```yaml
description: Enforce Docker standards for consistent, maintainable, and secure deployment in the CV Generator project
globs:
  - Dockerfile*
  - docker-compose*.yml
  - .docker/**/*
  - *.sh
tags:
  - docker
  - containerization
  - deployment
  - infrastructure
  - devops
priority: 1
version: 1.0.0
```

## Context

This rule applies to all Docker-related files in the CV Generator project, including Dockerfiles, docker-compose.yml, shell scripts, and configuration files. Following these standards ensures consistency, maintainability, and security across all development and deployment workflows.

## Requirements

### 1. Docker Architecture

1.1. Use a **structured Docker architecture** with clear separation of concerns:
- `.docker/` directory for all core Docker files
- Root directory for user-facing scripts
- Clear naming conventions for all Docker-related files

1.2. Implement **multi-stage builds** in production Dockerfiles to:
- Minimize image size
- Separate build and runtime dependencies
- Improve security by reducing attack surface

1.3. Use **appropriate base images**:
- `node:22-alpine` for development
- `nginx:alpine` for production
- Pin specific versions to ensure consistency

### 2. Image Creation Standards

2.1. Follow **Dockerfile best practices**:
- Group related commands to optimize layer caching
- Use `.dockerignore` to exclude unnecessary files
- Sort multi-line arguments alphabetically
- Document non-obvious decisions with comments

2.2. Include **metadata** using standard labels:
- `maintainer`
- `version`
- `description`
- `build-date`

2.3. Apply **security measures**:
- Run containers as non-root user
- Verify downloaded packages with checksums
- Keep base images updated
- Scan for vulnerabilities

### 3. Docker Compose Configuration

3.1. Structure services with **clear naming**:
- Use `cv-generator` for main application service
- Use descriptive names for supporting services

3.2. Implement **volume management**:
- Use named volumes for persistence
- Mount code volumes for development
- Document volume purpose in comments

3.3. Configure **networking** properly:
- Define port mappings explicitly
- Use internal networks for service communication
- Limit exposed ports to only what's necessary

### 4. Script Standards

4.1. Implement consistent **script pattern**:
- Argument validation and help documentation
- Error handling and status reporting
- Environment validation
- Progress reporting

4.2. Provide **user-friendly commands**:
- Start/stop functionality
- Health checking
- Testing utilities
- Cleanup operations

4.3. Support **multiple environments**:
- Development mode with hot-reloading
- Production mode with optimized settings
- Test mode for running automated tests

### 5. Build Optimization

5.1. Implement **efficient caching**:
- Order Dockerfile commands by change frequency
- Use lockfiles for deterministic builds
- Leverage layer caching effectively

5.2. Optimize **build context**:
- Use `.dockerignore` to exclude unnecessary files
- Keep build context minimal
- Use multi-stage builds to reduce final image size

### 6. Environment Configuration

6.1. Manage **environment variables** properly:
- Use `.env` files for local development
- Document required variables
- Provide sensible defaults
- Never commit sensitive values

6.2. Support **configuration overrides**:
- Allow runtime variable configuration
- Support different environments
- Document override methods

### 7. Health Checks and Monitoring

7.1. Implement **container health checks**:
- Define Docker health checks in compose file
- Create monitoring scripts
- Document monitoring procedures

7.2. Set up **resource constraints**:
- Configure memory limits
- Set CPU quotas
- Monitor resource usage

### 8. Documentation Standards

8.1. Maintain **comprehensive documentation**:
- `README.docker.md` for Docker-specific documentation
- Comments in Dockerfiles and docker-compose.yml
- Script help outputs
- Troubleshooting guides

8.2. Document **common operations**:
- Building and running containers
- Testing procedures
- Cleanup operations
- Update procedures

## Examples

### Good Dockerfile Example

```dockerfile
# Production Dockerfile for CV Generator
# Multi-stage build for optimized size and security
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Install dependencies
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

# Build application
COPY . .
RUN pnpm build

# Production stage
FROM nginx:alpine
COPY --from=builder /app/dist /usr/share/nginx/html
COPY .docker/config/nginx.conf /etc/nginx/conf.d/default.conf

# Security: run as non-root
USER nginx

# Metadata
LABEL maintainer="CV Generator Team" \
      version="1.0.0" \
      description="CV Generator Application"

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
```

### Bad Dockerfile Example

```dockerfile
# Don't do this
FROM node:latest
COPY . .
RUN npm install
RUN npm run build
RUN apk add nginx
EXPOSE 80
CMD nginx
```

### Good Script Example

```bash
#!/bin/bash
# docker-healthcheck.sh - Check health of Docker containers

# Error handling
set -e
trap 'echo "Error occurred. Exiting..."; exit 1' ERR

# Functions
check_docker_status() {
  echo "Checking Docker status..."
  # Implementation
}

check_container_health() {
  echo "Checking container health..."
  # Implementation
}

# Main logic
echo "Starting health check for CV Generator Docker containers..."
check_docker_status
check_container_health
echo "Health check completed successfully."
```

### Bad Script Example

```bash
#!/bin/bash
# Don't do this
docker ps | grep cv
docker logs cv-generator
echo "done"
```