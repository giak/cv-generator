---
description: "ALWAYS USE when DEFINING new project architecture and tech stack to ENSURE consistent and complete technical foundation"3
globs: "docs/project-*.md"
alwaysApply: false
---
---
title: "Template de Fondation de Projet"
version: "1.0.0"
description: "ALWAYS USE when DEFINING new project architecture and tech stack to ENSURE consistent and complete technical foundation"
globs: "docs/project-*.md"
lastUpdated: "2025-03-01"
tags: ["project-setup", "architecture", "technical-stack", "foundation"]
---

# üèóÔ∏è Template de Fondation de Projet

## üìã Vue d'Ensemble
Cette r√®gle fournit un template standardis√© pour d√©finir les fondations techniques d'un nouveau projet ou pour documenter un projet existant. Elle assure que tous les aspects essentiels de l'architecture, de la stack technique et des principes de d√©veloppement sont document√©s de mani√®re coh√©rente et compl√®te. Cette documentation servira de base pour g√©n√©rer le PRD et les documents d'architecture d√©taill√©s.

> ‚ö†Ô∏è **Attention**: Ce document doit √™tre compl√©t√© avant le d√©marrage de tout d√©veloppement significatif. Il constitue la base technique sur laquelle s'appuieront toutes les d√©cisions architecturales futures.

## üéØ Objectifs
- D√©finir clairement la vision technique et les objectifs du projet
- Documenter la stack technologique avec justifications
- √âtablir les principes d'architecture et de d√©veloppement
- Fournir une base solide pour la g√©n√©ration des documents PRD et architecture
- Assurer l'alignement entre les besoins m√©tier et les choix techniques
- Faciliter l'int√©gration des nouveaux membres dans l'√©quipe

## ‚úÖ Structure du Document

### 1Ô∏è‚É£ Informations G√©n√©rales du Projet
- **Nom du Projet**: [Nom complet]
- **Description Technique**: [Description concise de l'application d'un point de vue technique]
- **Cat√©gorie**: [Web/Mobile/Desktop/Hybride/Autre]
- **√âchelle Pr√©vue**: [Taille de l'application, utilisateurs attendus, volum√©trie]
- **Contraintes Principales**: [Contraintes techniques, de performance, r√©glementaires, etc.]

### 2Ô∏è‚É£ Vision Technique & Objectifs
- **Vision Technique**: [Description de la vision technique √† long terme]
- **Objectifs Techniques**: [Liste des objectifs techniques mesurables]
- **Principes Directeurs**: [Principes fondamentaux guidant les d√©cisions techniques]

### 3Ô∏è‚É£ Stack Technologique
- **Frontend**:
  - Framework: [Nom + Version]
  - Langage: [Nom + Version]
  - Biblioth√®ques Principales: [Liste des biblioth√®ques essentielles]
  - Outils de Build: [Liste des outils]

- **Backend**:
  - Framework: [Nom + Version]
  - Langage: [Nom + Version]
  - API Style: [REST/GraphQL/gRPC/Autre]
  - Biblioth√®ques Principales: [Liste des biblioth√®ques essentielles]

- **Donn√©es**:
  - Base(s) de Donn√©es: [Type et version]
  - ORM/DAL: [Outils d'acc√®s aux donn√©es]
  - Strat√©gie de Migration: [Approche pour les migrations]
  - Strat√©gie de Caching: [Approche pour le caching]

- **Infrastructure**:
  - Environnement d'H√©bergement: [Cloud/On-premise/Hybride]
  - Services Cloud: [Liste des services principaux]
  - Conteneurisation: [Docker/Kubernetes/Autre]
  - CI/CD: [Outils et pipelines]

- **Monitoring & Observabilit√©**:
  - Logging: [Solution de logging]
  - Monitoring: [Outils de monitoring]
  - Analytics: [Solutions d'analytics]

### 4Ô∏è‚É£ Architecture Fondamentale
- **Pattern Architectural**: [Monolithique/MonoRepo/Microservices/Serverless/etc.]
- **D√©coupage Fonctionnel**: [Grands modules fonctionnels]
- **Flux de Donn√©es Principaux**: [Description des flux de donn√©es essentiels]
- **Points d'Int√©gration Externes**: [Syst√®mes externes avec lesquels l'application interagit]

### 5Ô∏è‚É£ Principes de D√©veloppement
- **Standards de Code**: [Principes de clean code, conventions de nommage]
- **Strat√©gie de Test**: [Approche des tests, couverture attendue]
- **Mod√®le de Collaboration**: [Workflow Git, revue de code, etc.]
- **Documentation**: [Exigences de documentation]

### 6Ô∏è‚É£ Plan d'Impl√©mentation
- **Phases Techniques**: [Grandes phases d'impl√©mentation]
- **Priorit√©s Techniques**: [√âl√©ments √† prioriser]
- **Proof of Concepts**: [POCs n√©cessaires avant d√©marrage]

### 7Ô∏è‚É£ Risques et Mitigations
- **Risques Techniques**: [Identification des risques]
- **Strat√©gies de Mitigation**: [Approches pour r√©duire les risques]
- **Alternatives Envisag√©es**: [Solutions alternatives consid√©r√©es]

## üí° Exemples

<example>
**Bon exemple de Stack Technologique - Section Frontend**:

```markdown
## Stack Technologique

### Frontend
- **Framework**: React 18.2.0
- **Langage**: TypeScript 5.0.4
- **Biblioth√®ques Principales**:
  - Redux Toolkit (2.0.1) pour la gestion d'√©tat
  - React Query (5.0.0) pour la gestion des requ√™tes API
  - Styled Components (6.0.7) pour le styling
  - Jest et React Testing Library pour les tests
- **Outils de Build**:
  - Vite 5.0.0 comme bundler
  - ESLint avec config Airbnb pour le linting
  - Prettier pour le formatage de code

**Justification**:
- React a √©t√© choisi pour sa flexibilit√©, son √©cosyst√®me riche et la facilit√© de recrutement
- TypeScript assure la qualit√© du code et r√©duit les erreurs √† l'ex√©cution
- Redux Toolkit simplifie la gestion d'√©tat complexe n√©cessaire pour notre application
- Vite offre des performances de d√©veloppement sup√©rieures par rapport √† CRA
```

Ce fragment est bien structur√©, sp√©cifie les versions, inclut des justifications et couvre tous les aspects essentiels de la stack frontend.
</example>

<example type="invalid">
**Mauvais exemple de Architecture Fondamentale**:

```markdown
## Architecture

Nous utiliserons une architecture de microservices car c'est moderne et scalable. Il y aura plusieurs services comme l'authentification, les utilisateurs et les commandes.
```

Ce fragment est probl√©matique car:
1. Il manque de d√©tails sp√©cifiques sur les services et leurs responsabilit√©s
2. Il ne justifie pas le choix des microservices par rapport aux besoins du projet
3. Il n'explique pas les patterns de communication entre services
4. Il ne mentionne pas les flux de donn√©es
5. Il utilise des justifications g√©n√©riques ("moderne et scalable") sans lien avec les besoins sp√©cifiques du projet
</example>

## ‚öôÔ∏è Int√©gration avec les Documents Associ√©s

Une fois ce template compl√©t√©:

1. **G√©n√©ration du PRD**:
   - Utilisez les informations techniques pour compl√©ter le template PRD (`@901-prd-template-standardized.mdc`)
   - Assurez l'alignement entre les objectifs techniques et m√©tier
   - R√©f√©rencez ce document dans la section technique du PRD

2. **G√©n√©ration du Document d'Architecture**:
   - D√©veloppez l'architecture d√©taill√©e bas√©e sur ce document (`@902-arch-template-standardized.mdc`)
   - Approfondissez chaque aspect technique en diagrammes et d√©tails d'impl√©mentation
   - Maintenez la coh√©rence entre ce document fondamental et l'architecture d√©taill√©e

## ‚úÖ Bonnes Pratiques

- **Compl√©tude**: Remplissez toutes les sections du template
- **Sp√©cificit√©**: √âvitez les g√©n√©ralit√©s, soyez pr√©cis dans vos choix et leurs justifications
- **Versions**: Sp√©cifiez les versions pour tous les composants technologiques majeurs
- **Justifications**: Expliquez le "pourquoi" derri√®re chaque choix technique important
- **Coh√©rence**: Assurez-vous que tous les choix techniques forment un ensemble coh√©rent
- **√âvolution**: Revisitez r√©guli√®rement ce document pour le maintenir √† jour

## üîó R√©f√©rences
- [Template PRD](mdc:xnotes/901-prd-template-standardized.mdc)
- [Template Architecture](mdc:xnotes/902-arch-template-standardized.mdc)
- [Workflow Agile](mdc:xnotes/801-workflow-agile-standardized.mdc)

<version>1.0.0</version> 