---
description: "TOUJOURS APPLIQUER lors de l'IDENTIFICATION de stories trop volumineuses pour GARANTIR un d√©coupage efficace"
globs: "**/*.story.md"
alwaysApply: false
---
---
title: "User Story Splitting Workflow"
version: "1.1.0"
description: "TOUJOURS APPLIQUER lors de l'IDENTIFICATION de stories trop volumineuses pour GARANTIR un d√©coupage efficace"
globs: "**/*.story.md"
alwaysApply: false
priority: 75
compatibility: ">=0.45"
lastUpdated: "2025-03-13"
tags: ["agile", "user-story", "splitting", "workflow", "refinement"]
---

# üî™ Workflow de D√©coupage des User Stories

## üìã Vue d'Ensemble
Cette r√®gle d√©finit un workflow standardis√© pour d√©couper des user stories trop volumineuses en stories plus petites et ind√©pendantes. Elle pr√©sente des techniques √©prouv√©es (SPIDR, INVEST) et un processus d√©cisionnel pour garantir que les stories r√©sultantes apportent de la valeur tout en restant suffisamment petites pour √™tre compl√©t√©es dans un sprint.

> ‚ö†Ô∏è **Attention**: Le d√©coupage inappropri√© des stories peut compromettre la livraison de valeur et causer des d√©pendances probl√©matiques entre les stories.

## üéØ Objectifs
- Identifier rapidement les stories n√©cessitant un d√©coupage
- Appliquer les patterns de d√©coupage les plus appropri√©s selon le contexte
- Garantir que les stories r√©sultantes respectent le principe INVEST
- R√©duire le temps de cycle en travaillant sur des incr√©ments plus petits
- Am√©liorer la pr√©visibilit√© des sprints et faciliter l'estimation
- Maximiser la valeur m√©tier livr√©e dans chaque incr√©ment
- Faciliter la priorisation des fonctionnalit√©s √† livrer en premier

## ‚úÖ Requirements

- V√©rifier qu'une story est trop volumineuse avant de la d√©couper
- Utiliser les indicateurs sp√©cifiques pour identifier les stories candidates au d√©coupage
- Appliquer le workflow de d√©cision en trois √©tapes
- Choisir le pattern de d√©coupage le plus appropri√© parmi les techniques pr√©sent√©es
- Valider que les stories r√©sultantes respectent les crit√®res INVEST
- Mettre √† jour les stories d√©coup√©es dans le syst√®me de gestion du backlog
- Documenter la relation entre les stories originales et leurs sous-stories

## üîç Indicateurs d'une Story Trop Volumineuse

Consid√©rez le d√©coupage lorsque la story pr√©sente un ou plusieurs de ces signes:

1. **Estimation excessive**: Plus de 8 points de story ou plus de 5 jours de travail
2. **Complexit√© √©lev√©e**: Plus de 7 crit√®res d'acceptation
3. **Ampleur**: Couvre plusieurs fonctionnalit√©s ou r√¥les utilisateurs distincts
4. **√âtendue technique**: Implique plusieurs couches techniques (UI, API, base de donn√©es)
5. **Incertitude**: L'√©quipe ne parvient pas √† l'estimer clairement
6. **Langage**: Contient des termes comme "et", "ou", "√©galement", "puis" dans sa description
7. **T√¢ches**: N√©cessite plus de 10 t√¢ches pour √™tre compl√©t√©e
8. **Dur√©e**: Ne peut pas √™tre compl√©t√©e dans un seul sprint
9. **Conjonctions et pluriels**: Pr√©sence de termes comme "g√©rer", "administrer", ou verbes au pluriel
10. **MVP gap**: Ne peut pas √™tre incluse dans un MVP (Produit Minimum Viable) sans √™tre d√©coup√©e

## üß≠ Principes Fondamentaux du D√©coupage

Avant d'appliquer les patterns de d√©coupage, assurez-vous de respecter ces principes fondamentaux:

1. **Approche verticale, non horizontale**: Chaque story d√©coup√©e doit apporter une valeur m√©tier directe, pas simplement une couche technique.
2. **Valeur d'abord**: Priorisez le d√©coupage qui permet de livrer de la valeur le plus rapidement possible.
3. **Simplicit√© d'abord**: Commencez par la version la plus simple qui fonctionne, puis enrichissez.
4. **INVEST sur chaque sous-story**: Chaque story d√©coup√©e doit respecter les crit√®res INVEST.
5. **Ind√©pendance**: Minimisez les d√©pendances entre les stories r√©sultantes.
6. **Focus sur le flux utilisateur**: Gardez toujours √† l'esprit le parcours utilisateur complet.
7. **Approche it√©rative**: Le d√©coupage parfait n'existe pas au premier essai - ajustez au besoin.
8. **R√©v√©lation de complexit√©**: Utilisez le d√©coupage comme moyen de r√©v√©ler une complexit√© cach√©e.

## üîÑ Workflow de D√©coupage en 3 √âtapes

### 1Ô∏è‚É£ √âvaluation Initiale
- Identifier les stories candidates au d√©coupage en utilisant les indicateurs ci-dessus
- Confirmer que la story a bien une structure "En tant que, je veux, afin de"
- Clarifier l'objectif m√©tier principal de la story pour pr√©server la valeur apr√®s d√©coupage
- D√©terminer pourquoi la story est trop volumineuse (complexit√©, incertitude, ampleur)
- Cartographier le flux utilisateur complet pour comprendre le contexte global

### 2Ô∏è‚É£ S√©lection et Application du Pattern de D√©coupage
Choisir un ou plusieurs patterns appropri√©s parmi les techniques suivantes:

#### üï∏Ô∏è Approche SPIDR (Mike Cohn)

1. **S - Spike (Exploration)**
   - Extraire une activit√© d'investigation technique ou m√©tier
   - Limiter le spike √† 1-3 jours de travail
   - D√©finir clairement le r√©sultat attendu du spike (prototype, document, d√©cision)
   - Exemple: "D√©terminer si nous utilisons une solution existante ou d√©veloppons notre propre syst√®me de gestion des m√©dias"

2. **P - Path (Chemin)**
   - Diviser par chemins ou sc√©narios utilisateur alternatifs
   - Commencer par le chemin principal ("happy path")
   - Ajouter les cas d'erreur ou alternatifs dans des stories s√©par√©es
   - Exemple: "Partager une vid√©o par email" vs "Partager une vid√©o sur les r√©seaux sociaux"

3. **I - Interface (Interface)**
   - S√©parer par types d'interface ou m√©thodes d'interaction
   - Impl√©menter d'abord une interface simple puis l'am√©liorer
   - Exemples: 
     - CLI avant GUI
     - Formulaire simple avant calendrier interactif
     - Version mobile avant version desktop
     - Interface textuelle avant interface graphique √©labor√©e

4. **D - Data (Donn√©es)**
   - Subdiviser par types ou ensembles de donn√©es
   - Commencer avec un sous-ensemble de donn√©es critiques
   - Ajouter progressivement la prise en charge d'autres types de donn√©es
   - Exemple: "Supporter d'abord les vid√©os au format MP4 uniquement, puis ajouter d'autres formats"

5. **R - Rules (R√®gles m√©tier)**
   - S√©parer par r√®gles m√©tier ou validations
   - Impl√©menter d'abord les r√®gles essentielles
   - Ajouter les r√®gles complexes ou sp√©ciales dans des stories ult√©rieures
   - Exemple: "Version initiale sans validation de contenu prot√©g√© par copyright" puis "Ajouter la d√©tection de contenu prot√©g√©"

#### üîß Techniques Compl√©mentaires

6. **√âtapes de Workflow**
   - Diviser un processus en √©tapes distinctes
   - Cr√©er une story "simplifi√©e" couvrant le d√©but et la fin du workflow
   - Ajouter les √©tapes interm√©diaires comme stories s√©par√©es
   - Exemple: "Processus de paiement sans validation" puis "Ajouter la validation des informations de carte"

7. **Op√©rations CRUD**
   - Diviser les stories "g√©rer" en op√©rations Create, Read, Update, Delete
   - Prioriser les op√©rations selon leur valeur m√©tier
   - Exemple: Diviser "g√©rer les profils" en "cr√©er un profil", "consulter un profil", etc.
   - Conseil: Souvent, impl√©menter Read (R) en premier apporte d√©j√† de la valeur

8. **Variations Fonctionnelles**
   - S√©parer les fonctionnalit√©s de base des fonctionnalit√©s avanc√©es
   - Impl√©menter d'abord la version simple puis l'am√©liorer
   - Exemple: "Recherche simple par mot-cl√©" avant "Recherche avanc√©e avec filtres"
   - S'assurer que chaque variation apporte une valeur utilisateur sp√©cifique

9. **Performance Diff√©r√©e**
   - S√©parer la fonctionnalit√© de ses exigences de performance
   - Impl√©menter d'abord une version fonctionnelle puis l'optimiser
   - Exemple: "Recherche (lente)" puis "Recherche (< 3 secondes)"
   - Applicable aussi √† d'autres qualit√©s non-fonctionnelles: s√©curit√©, disponibilit√©, etc.

10. **R√©duction d'Effort**
    - Identifier la partie n√©cessitant le plus d'effort et l'isoler
    - Impl√©menter d'abord les parties simples √† haute valeur
    - Aborder progressivement les parties complexes
    - Cartographier l'effort relatif pour identifier o√π faire des coupures

#### üîç Techniques Sp√©cialis√©es

11. **D√©composition par Personas**
    - Diviser une story selon les diff√©rents types d'utilisateurs
    - Commencer par le persona principal puis √©tendre aux autres
    - Exemple: "R√©servation pour clients standard" puis "R√©servation pour clients premium"
    - Particuli√®rement utile quand les besoins varient significativement entre personas

12. **D√©coupage par Attributs ou Options**
    - S√©parer les attributs optionnels ou configurables
    - Commencer avec les attributs essentiels uniquement
    - Exemple: "Cr√©ation de compte avec informations de base" puis "Ajout des pr√©f√©rences utilisateur"
    - Utile pour les entit√©s avec de nombreux attributs ou options

13. **D√©coupage par Niveaux de Qualit√©**
    - Diviser par niveaux de raffinement ou de qualit√© croissants
    - Impl√©menter d'abord une version minimaliste mais fonctionnelle
    - Exemple: "Envoyer un email basique en texte" puis "Ajouter un template HTML"
    - S'applique bien aux exigences esth√©tiques ou d'exp√©rience utilisateur

14. **D√©coupage par √âtapes d'Adoption**
    - Diviser en fonction des phases d'adoption par les utilisateurs
    - Commencer par les fonctionnalit√©s n√©cessaires au lancement
    - Exemple: "Version b√™ta limit√©e" puis "Version compl√®te"
    - Align√© sur la strat√©gie de d√©ploiement et d'adoption du produit

15. **D√©coupage Technique Conscient**
    - D√©coupage tenant compte des contraintes techniques tout en gardant une valeur m√©tier
    - Utile pour les infrastructures complexes ou syst√®mes distribu√©s
    - Exemple: "Impl√©mentation sur un seul n≈ìud" puis "Distribution sur plusieurs n≈ìuds"
    - √Ä utiliser avec pr√©caution pour √©viter un d√©coupage purement technique

### 3Ô∏è‚É£ Validation du D√©coupage
V√©rifier que les stories r√©sultantes respectent les crit√®res INVEST:

- **I**nd√©pendantes: Peuvent √™tre d√©velopp√©es dans n'importe quel ordre
- **N**√©gociables: Restent flexibles et ouvertes √† la discussion
- **V**alorisables: Chaque story apporte une valeur m√©tier tangible
- **E**stimables: L'√©quipe peut estimer leur effort avec confiance
- **S**uffisamment petites: R√©alisables dans un sprint
- **T**estables: Comportent des crit√®res d'acceptation clairs

#### Crit√®res suppl√©mentaires de validation:
- Chaque story est-elle une tranche verticale (traverse toutes les couches de l'architecture)?
- L'ordre de priorit√© des stories est-il clair?
- Les d√©pendances entre stories sont-elles minimis√©es?
- Y a-t-il une progression logique de valeur entre les stories?
- Les crit√®res d'acceptation sont-ils clairs pour chaque story?

## üõ†Ô∏è Processus de D√©coupage Structur√©

Pour faciliter le d√©coupage m√©thodique, suivez ces √©tapes structur√©es:

1. **Identification du c≈ìur de valeur**: D√©terminez quelle est l'essence de la valeur m√©tier de la story originale
2. **Cartographie des complexit√©s**: Identifiez toutes les sources de complexit√© (donn√©es, r√®gles, interfaces, etc.)
3. **S√©lection de la premi√®re tranche**: Choisissez la plus petite tranche qui apporte d√©j√† une valeur m√©tier
4. **D√©coupage it√©ratif**: Appliquez les patterns pertinents et r√©p√©tez jusqu'√† atteindre la taille appropri√©e
5. **V√©rification de la couverture**: Assurez-vous que toutes les fonctionnalit√©s de la story originale sont couvertes
6. **Validation transversale**: V√©rifiez que chaque story respecte les crit√®res INVEST
7. **R√©organisation par priorit√©**: Ordonnez les stories r√©sultantes par ordre de priorit√© m√©tier

## üí° Exemples de D√©coupage

<example>
**Story originale trop volumineuse:**

```markdown
En tant qu'utilisateur, je veux pouvoir g√©rer mon panier d'achat afin de finaliser ma commande.
```

**D√©coupage inefficace (par couche technique):**
```markdown
Story 1: En tant que d√©veloppeur, je veux cr√©er les tables de base de donn√©es pour le panier
Story 2: En tant que d√©veloppeur, je veux impl√©menter l'API du panier
Story 3: En tant que d√©veloppeur, je veux cr√©er l'interface utilisateur du panier
```

**Bon d√©coupage (par op√©rations CRUD):**
```markdown
Story 1: En tant qu'utilisateur, je peux ajouter des produits √† mon panier
Story 2: En tant qu'utilisateur, je peux consulter le contenu de mon panier
Story 3: En tant qu'utilisateur, je peux modifier la quantit√© des produits dans mon panier
Story 4: En tant qu'utilisateur, je peux supprimer des produits de mon panier
```

**Explication:** Le mauvais d√©coupage cr√©e des stories qui ne respectent pas le principe d'ind√©pendance et de valeur. Le bon d√©coupage utilise le pattern "Op√©rations CRUD" pour cr√©er des stories ind√©pendantes qui apportent chacune une valeur m√©tier.
</example>

<example>
**Story originale trop volumineuse:**

```markdown
En tant qu'utilisateur, je veux pouvoir rechercher des vols en fonction de crit√®res flexibles afin de trouver le vol qui me convient le mieux.
```

**D√©coupage par r√®gles m√©tier et interface:**
```markdown
Story 1: En tant qu'utilisateur, je peux rechercher des vols par date exacte avec une interface simple
Story 2: En tant qu'utilisateur, je peux rechercher des vols dans une plage de ¬±3 jours
Story 3: En tant qu'utilisateur, je peux rechercher des vols pour un weekend sp√©cifique
Story 4: En tant qu'utilisateur, je peux utiliser un calendrier interactif pour s√©lectionner les dates
```

**Explication:** Ce d√©coupage combine les patterns "Rules" (r√®gles m√©tier) et "Interface" de SPIDR. La premi√®re story impl√©mente la fonctionnalit√© de base avec l'interface la plus simple, puis les stories suivantes ajoutent des r√®gles m√©tier plus complexes et une interface plus sophistiqu√©e.
</example>

<example>
**Story originale trop volumineuse:**

```markdown
En tant que gestionnaire de contenu, je veux pouvoir publier un article sur le site corporate afin d'informer nos clients des derni√®res actualit√©s.
```

**D√©coupage par √©tapes de workflow:**
```markdown
Story 1: En tant que gestionnaire de contenu, je peux publier un article directement sur le site corporate
Story 2: En tant que gestionnaire de contenu, je peux soumettre un article pour r√©vision √©ditoriale
Story 3: En tant qu'√©diteur, je peux r√©viser et approuver un article soumis
Story 4: En tant que gestionnaire de contenu, je peux pr√©visualiser l'article sur un site de staging
Story 5: En tant que gestionnaire de contenu, je peux planifier la publication d'un article pour une date future
```

**Explication:** Ce d√©coupage utilise le pattern "√âtapes de Workflow" pour simplifier un processus complexe. La premi√®re story permet un flux direct sans √©tapes interm√©diaires, puis les stories suivantes ajoutent des √©tapes de workflow plus sophistiqu√©es.
</example>

## üî™ Arbre de D√©cision pour le Choix du Pattern

```mermaid
graph TD
    A[Story trop volumineuse] --> B{Pourquoi est-elle trop grande?}
    B -->|Multiples fonctionnalit√©s| C[Utiliser Path/Workflow]
    B -->|Interface complexe| D[Utiliser Interface]
    B -->|Nombreuses r√®gles m√©tier| E[Utiliser Rules]
    B -->|Beaucoup de donn√©es| F[Utiliser Data]
    B -->|CRUD complet| G[Utiliser Op√©rations CRUD]
    B -->|Incertitude technique| H[Utiliser Spike]
    B -->|Exigences de performance| I[Utiliser Performance Diff√©r√©e]
    B -->|Plusieurs types d'utilisateurs| J[Utiliser Personas]
    B -->|Nombreux attributs| K[Utiliser Attributs]
    C --> L[Stories d√©coup√©es]
    D --> L
    E --> L
    F --> L
    G --> L
    H --> L
    I --> L
    J --> L
    K --> L
    L --> M{Respectent INVEST?}
    M -->|Oui| N[Termin√©]
    M -->|Non| O[Red√©couper]
    O --> B
```

## üß© Strat√©gies de D√©coupage par Type de Projet

### üì± Applications Front-End / UI
- **Privil√©giez:** Interface, Path, Variations Fonctionnelles, Niveaux de Qualit√©
- **Approche recommand√©e:** Commencez par une interface minimale mais fonctionnelle, puis enrichissez-la progressivement
- **Exemple:** D'abord un formulaire simple en HTML/CSS, puis ajoutez des validations JS, puis des am√©liorations UX

### üîÑ APIs et Services Backend
- **Privil√©giez:** Data, Rules, CRUD, Performance Diff√©r√©e
- **Approche recommand√©e:** Impl√©mentez d'abord un sous-ensemble minimal d'endpoints avec des r√®gles simplifi√©es
- **Exemple:** API de paiement d'abord avec un seul fournisseur, puis ajoutez d'autres fournisseurs

### üìä Applications d'Analyse et BI
- **Privil√©giez:** Data, Variations Fonctionnelles, Personas
- **Approche recommand√©e:** Commencez par les m√©triques essentielles et un sous-ensemble de donn√©es
- **Exemple:** Dashboard avec les 3 KPIs principaux d'abord, puis enrichissement progressif

### üèõÔ∏è Syst√®mes Legacy / Modernisation
- **Privil√©giez:** Spike, √âtapes d'Adoption, D√©coupage Technique Conscient
- **Approche recommand√©e:** Proc√©dez par migration incr√©mentale avec coexistence des syst√®mes
- **Exemple:** D'abord la lecture seule dans le nouveau syst√®me, puis progressivement les op√©rations d'√©criture

## ‚ö†Ô∏è Pi√®ges √† √âviter

1. **D√©coupage horizontal**: Ne jamais d√©couper par couche technique (UI, API, DB)
2. **D√©coupage par t√¢ches**: √âviter de transformer des t√¢ches en stories
3. **Perte de valeur**: S'assurer que chaque story apporte une valeur m√©tier
4. **D√©pendances fortes**: Minimiser les d√©pendances entre stories d√©coup√©es
5. **Granularit√© excessive**: Ne pas cr√©er des stories trop petites (< 1 point)
6. **Oublier le contexte**: Toujours maintenir le lien avec l'objectif m√©tier global
7. **Complexit√© artificielle**: Ne pas ajouter de complexit√© juste pour faciliter le d√©coupage
8. **D√©coupage par fonctionnalit√© technique**: √âviter "En tant que syst√®me, je veux..."
9. **D√©coupage bas√© uniquement sur l'effort**: L'effort n'est pas le seul crit√®re de d√©coupage
10. **Oubli de la vision globale**: S'assurer que l'ensemble des stories d√©coup√©es couvre la fonctionnalit√© originale

## üîÑ Gestion des D√©pendances

M√™me avec le meilleur d√©coupage, certaines d√©pendances peuvent subsister entre les stories. Voici comment les g√©rer:

1. **Identification explicite**: Documentez clairement les d√©pendances dans chaque story
2. **Minimisation**: Cherchez √† r√©duire au maximum les d√©pendances lors du d√©coupage
3. **Priorisation adapt√©e**: Ordonnez le backlog pour tenir compte des d√©pendances
4. **Regroupement strat√©gique**: Envisagez de regrouper les stories fortement d√©pendantes dans le m√™me sprint
5. **Conception adaptative**: Utilisez des patterns de conception qui facilitent l'√©volution ind√©pendante

## ‚úÖ Bonnes Pratiques

- **Impliquer l'√©quipe**: Faire du d√©coupage une activit√© collaborative
- **Focus sur la valeur**: Prioriser les stories qui apportent le plus de valeur
- **Apprentissage rapide**: Favoriser les stories qui r√©duisent les incertitudes
- **Documentation**: Noter les d√©cisions de d√©coupage dans les stories
- **Adaptation**: Ajuster le niveau de d√©coupage selon la maturit√© de l'√©quipe
- **It√©rer**: Ne pas chercher le d√©coupage parfait du premier coup
- **Feedback**: Utiliser les retours des sprints pour am√©liorer le d√©coupage
- **Visualisation**: Utiliser le story mapping pour comprendre le flux utilisateur complet
- **Contextualisation**: Maintenir le lien avec le besoin utilisateur et l'objectif m√©tier
- **Trouver le bon niveau**: √âviter √† la fois les stories trop grandes et trop petites

## üìù Template de D√©coupage

Pour faciliter le processus de d√©coupage, utilisez ce template:

```markdown
## Story Originale
[Description de la story originale]

## Raisons du D√©coupage
- [Raison 1]
- [Raison 2]

## Pattern(s) de D√©coupage Choisi(s)
- [Pattern 1] - Raison: [Explication]
- [Pattern 2] - Raison: [Explication]

## Stories R√©sultantes
1. [Description de la Story 1] - Valeur: [Explication de la valeur m√©tier]
2. [Description de la Story 2] - Valeur: [Explication de la valeur m√©tier]
...

## D√©pendances Identifi√©es
- Story 2 d√©pend de Story 1 pour [raison]
- ...

## Ordre de Priorit√© Sugg√©r√©
1. Story X
2. Story Y
...
```

## üîó R√©f√©rences
- [Guide SPIDR de Mike Cohn](mdc:https:/www.mountaingoatsoftware.com/blog/five-simple-but-powerful-ways-to-split-user-stories)
- [Patterns de D√©coupage de Richard Lawrence](mdc:https:/www.humanizingwork.com/the-humanizing-work-guide-to-splitting-user-stories)
- [Template de User Story](mdc:903-story-template-standardized)
- [INVEST in Good Stories](mdc:https:/www.agilealliance.org/glossary/invest)
- [Story Mapping pour le D√©coupage](mdc:https:/www.jpattonassociates.com/user-story-mapping)
- [Techniques Avanc√©es de D√©coupage](mdc:https:/www.agileforall.com/splitting-user-stories-the-hamburger-method)

<requires>903-story-template-standardized</requires>

<version>1.1.0</version> 