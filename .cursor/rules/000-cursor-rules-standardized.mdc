---
description: "TOUJOURS utiliser lors de la CR√âATION ou MODIFICATION d'une R√àGLE pour GARANTIR coh√©rence et efficacit√©"
globs: ".cursor/rules/*.mdc"
alwaysApply: false
---
---
title: "Format Standard des R√®gles Cursor"
version: "3.0.0"
description: "TOUJOURS utiliser lors de la CR√âATION ou MODIFICATION d'une R√àGLE pour GARANTIR coh√©rence et efficacit√©"
globs: ".cursor/rules/*.mdc"
alwaysApply: false
priority: 100
compatibility: ">=0.45"
lastUpdated: "2025-03-10"
tags: ["meta", "standard", "r√®gles"]
---

# üìè Format Standard des R√®gles Cursor

## üìã Vue d'Ensemble
Cette r√®gle d√©finit le format standard pour toutes les r√®gles Cursor. Elle garantit que les r√®gles sont structur√©es de mani√®re coh√©rente, optimis√©es pour l'IA et fournissent des instructions claires et exploitables. Le respect de ces standards est essentiel pour l'efficacit√© de l'agent IA et la coh√©rence du syst√®me de r√®gles.

> ‚ö†Ô∏è **Attention**: Cette r√®gle est fondamentale et toutes les autres r√®gles doivent s'y conformer. Elle d√©finit le cadre dans lequel toutes les autres r√®gles doivent s'inscrire.

## üéØ Objectifs
- Assurer une structure coh√©rente pour toutes les r√®gles Cursor
- Optimiser les r√®gles pour une d√©tection et une application efficaces par l'IA
- Minimiser l'overhead de contexte tout en maximisant l'impact des r√®gles
- Faciliter la maintenance et l'√©volution du syst√®me de r√®gles
- Garantir que les r√®gles sont claires, concises et exploitables

## ‚úÖ Structure de Base des R√®gles

### 1Ô∏è‚É£ Format du Frontmatter
```mdc
---
title: "Titre Descriptif de la R√®gle"
version: "X.Y.Z"
description: "ACTION quand D√âCLENCHEUR pour R√âSULTAT"
globs: "motif/glob/*.ext"
alwaysApply: false
priority: 50
compatibility: ">=0.45"
lastUpdated: "YYYY-MM-DD"
tags: ["tag1", "tag2", "tag3"]
---
```

### 2Ô∏è‚É£ Corps de la R√®gle
```mdc
# Titre de la R√®gle

## Contexte
- Quand appliquer cette r√®gle
- Pr√©requis ou conditions

## Requirements
- √âl√©ments d'action concis
- Chaque exigence doit √™tre testable

## Exemples
<example>
Bon exemple concis avec explication
</example>

<example type="invalid">
Exemple invalide concis avec explication
</example>

<version>X.Y.Z</version>
```

## üìÅ Organisation des Fichiers

### üìÇ Emplacement
- Chemin: `.cursor/rules/`
- Extension: `.mdc`

### üè∑Ô∏è Convention de Nommage
`PR√âFIXE-nom.mdc` o√π PR√âFIXE est:
- `0XX`: Standards fondamentaux
- `1XX`: Configurations d'outils
- `3XX`: Standards de test
- `1XXX`: R√®gles de langage
- `2XXX`: R√®gles de framework
- `8XX`: Workflows
- `9XX`: Templates
- `_nom.mdc`: R√®gles priv√©es

## üîç Champs Obligatoires

### üìã Frontmatter
- `title`: Titre descriptif de la r√®gle
- `version`: Num√©ro de version X.Y.Z (format SemVer)
- `description`: Format ACTION quand D√âCLENCHEUR pour R√âSULTAT
- `globs`: Motif glob pour les fichiers et dossiers
- `alwaysApply`: Bool√©en pour l'injection inconditionnelle (false par d√©faut)
- `priority`: Valeur num√©rique (1-100) d√©finissant l'importance relative
- `compatibility`: Version minimale de Cursor compatible (ex: ">=0.45")
- `lastUpdated`: Date de derni√®re mise √† jour (YYYY-MM-DD)
- `tags`: Liste de tags pour la cat√©gorisation

### üìù Corps
- Contexte: Conditions d'usage
- Requirements: √âl√©ments d'action
- Exemples: Valides et invalides
- `<version>X.Y.Z</version>`: √Ä la fin du document

## üéØ Activation Conditionnelle

### üìã Structure de la Description
Pour maximiser l'efficacit√© de l'activation conditionnelle:

1. Format obligatoire: "ACTION quand D√âCLENCHEUR pour R√âSULTAT"
   - ACTION: Verbe imp√©ratif (TOUJOURS, V√âRIFIER, APPLIQUER...)
   - D√âCLENCHEUR: Contexte pr√©cis d'activation (CR√âATION, √âCRITURE...)
   - R√âSULTAT: B√©n√©fice attendu (GARANTIR, ASSURER, MAINTENIR...)

2. Exemples de descriptions efficaces:
   - "TOUJOURS utiliser lors de la CR√âATION de fichiers JavaScript pour GARANTIR coh√©rence"
   - "V√âRIFIER avant COMMIT pour PR√âVENIR les probl√®mes de qualit√©"
   - "APPLIQUER lors de la REFACTORISATION pour MAINTENIR lisibilit√©"

### üîÑ M√©canisme d'Activation
1. Injection via `alwaysApply: true` ou correspondance de `globs`
2. √âvaluation contextuelle par l'IA bas√©e sur la `description`
3. Activation si l'IA juge la r√®gle pertinente pour la requ√™te actuelle

## üîÑ Interop√©rabilit√© des R√®gles

### üèóÔ∏è D√©pendances
- Format: `<requires>nom-de-regle</requires>`
- Exemple: `<requires>801-workflow-agile-standardized</requires>`

### ü•á Priorit√©s et R√©solution de Conflits
- Utiliser le champ `priority` (1-100) pour d√©finir l'importance relative
- R√®gles de priorit√© sup√©rieure pr√©valent en cas de conflit
- R√®gles sp√©cifiques (globs pr√©cis) pr√©valent sur r√®gles g√©n√©rales

## üìä Motifs Glob Courants

| Type de R√®gle | Exemple de Motif Glob |
|:--------------|:----------------------|
| Standards fondamentaux | `.cursor/rules/*.mdc` |
| R√®gles JavaScript/TypeScript | `src/**/*.{js,ts}` |
| Standards de test | `**/*.test.{js,ts}` |
| Composants React | `src/components/**/*.tsx` |
| Documentation | `docs/**/*.md` |
| Fichiers de configuration | `*.config.{js,json}` |
| Artefacts de build | `dist/**/*` |
| Extensions multiples | `src/**/*.{js,jsx,ts,tsx}` |
| Fichiers multiples | `dist/**/*`, `docs/**/*.md` |

## üìù Directives de Formatage

### ‚úèÔ∏è Style G√©n√©ral
- Utiliser principalement du Markdown concis
- Limiter les balises XML √†:
  - `<example>`
  - `<danger>`
  - `<required>`
  - `<rules>`
  - `<rule>`
  - `<critical>`
  - `<version>`
  - `<requires>`
- Indenter le contenu dans les balises XML de 2 espaces
- Garder les r√®gles aussi courtes que possible
- Utiliser la syntaxe Mermaid si elle sera plus claire qu'une description textuelle
- Utiliser des emojis pour am√©liorer la compr√©hension par l'agent IA
- Garder les exemples aussi courts que possible

## üß† Optimisation pour l'IA

### üîß Techniques d'Optimisation
1. Format ACTION D√âCLENCHEUR R√âSULTAT pr√©cis dans les descriptions
2. Exemples positifs et n√©gatifs concis de l'application de la r√®gle
3. Optimisation pour l'efficacit√© de la fen√™tre de contexte de l'IA
4. Suppression des informations non essentielles ou redondantes
5. Utilisation de motifs glob standards sans guillemets (ex: `*.js`, `src/**/*.ts`)
6. Utilisation de marqueurs s√©mantiques pour les parties critiques

### üöÄ Efficacit√© du Contexte
1. Maintenir la description du frontmatter sous 120 caract√®res
2. Limiter les exemples aux mod√®les essentiels uniquement
3. Utiliser une structure hi√©rarchique pour une analyse rapide
4. Supprimer les informations redondantes entre les sections
5. Maintenir une densit√© d'information √©lev√©e avec un minimum de tokens
6. Se concentrer sur les instructions exploitables par la machine
7. Pour les r√®gles complexes, prioriser les sections critiques en d√©but de document

## üí° Exemples

<example>
**Bonne R√®gle Cursor**:

```mdc
---
title: "JavaScript Error Handling"
version: "1.0.0"
description: "TOUJOURS utiliser lors de l'√âCRITURE de code de gestion d'erreurs pour GARANTIR robustesse"
globs: "src/**/*.{js,ts}"
alwaysApply: false
priority: 70
compatibility: ">=0.45"
lastUpdated: "2024-02-15"
tags: ["javascript", "error-handling", "robustness"]
---

# JavaScript Error Handling Standards

## Context
- Apply when implementing error handling in JavaScript/TypeScript code
- Critical for production applications and API integrations

## Requirements
- Use try/catch blocks for all async operations
- Always include specific error types in catch blocks
- Log errors with sufficient context for debugging
- Never swallow errors without proper handling
- Return consistent error responses from APIs

## Examples
<example>
// Good error handling
try {
  const data = await fetchData();
  processData(data);
} catch (error) {
  if (error instanceof NetworkError) {
    logger.error('Network error during fetch', { error, context: 'fetchData' });
    notifyUser('Connection issue detected');
  } else {
    logger.error('Unknown error during fetch', { error });
    throw new ApplicationError('Data processing failed', error);
  }
}
</example>

<example type="invalid">
// Poor error handling
try {
  await fetchData();
} catch (error) {
  console.log(error);
}
</example>

<version>1.0.0</version>
```

Cette r√®gle est optimis√©e car elle:
1. Utilise un format ACTION D√âCLENCHEUR R√âSULTAT clair
2. Inclut tous les champs frontmatter recommand√©s
3. Fournit des exigences sp√©cifiques et testables
4. Inclut des exemples concrets positifs et n√©gatifs
5. Utilise une structure hi√©rarchique claire
6. Ne contient pas d'informations redondantes
7. Est orient√©e vers des instructions actionnables
</example>

<example type="invalid">
**R√®gle Cursor Probl√©matique**:

```mdc
---
description: "This is a rule about JavaScript error handling that helps you handle errors better"
globs: "*.js"
other_field: "Something else"
---

# JS Errors

This rule helps you handle errors better in JavaScript. It's really important to handle errors properly because otherwise your application might crash.

## Some Guidelines

When you're writing JavaScript, you should try to handle errors appropriately. This means using try/catch blocks. Here's how you might do that:

try {
  // do something
} catch (e) {
  // handle the error
}

Make sure you don't just catch errors and do nothing with them, because that would be bad practice. Always log your errors or handle them in some way.

Also, remember that async functions can throw errors too, so you should handle those as well.

```

Cette r√®gle est probl√©matique car elle:
1. Utilise une description vague sans format ACTION D√âCLENCHEUR R√âSULTAT
2. Contient des champs non standard dans le frontmatter
3. Manque de champs obligatoires (version, title, etc.)
4. Est verbeuse avec beaucoup d'explications non n√©cessaires
5. Manque d'exemples clairement d√©limit√©s
6. Ne structure pas les exigences de mani√®re concise et testable
7. Ne suit pas la structure hi√©rarchique standard
8. N'inclut pas de num√©ro de version
</example>

## ‚ö†Ô∏è Points Critiques

<critical>
- NE JAMAIS inclure d'explications verbeuses ou de contexte redondant qui augmente l'overhead de tokens de l'IA
- Garder le fichier aussi court et direct que possible MAIS JAMAIS aux d√©pens de l'impact et de l'utilit√© de la r√®gle pour l'agent IA
- Le frontmatter DOIT contenir au minimum les champs `description`, `globs`, `title` et `version`
- Les autres champs (`alwaysApply`, `priority`, `compatibility`, `lastUpdated`, `tags`) sont fortement recommand√©s
- Toujours suivre le format strict "ACTION quand D√âCLENCHEUR pour R√âSULTAT" dans la description
</critical>

## ‚úÖ Bonnes Pratiques

- **Concision**: Maximiser l'impact avec un minimum de mots
- **Clart√©**: Utiliser un langage pr√©cis et direct
- **Actionnable**: Fournir des directives que l'on peut suivre et tester
- **Exemples**: Toujours inclure des exemples positifs et n√©gatifs
- **Structure**: Suivre la hi√©rarchie recommand√©e
- **Optimisation**: Concevoir pour une efficacit√© maximale du contexte de l'IA
- **Maintenance**: Mettre √† jour la version lors des modifications substantielles
- **Activation**: S'assurer que la description est optimis√©e pour l'activation conditionnelle
- **Interop√©rabilit√©**: D√©finir clairement les relations avec d'autres r√®gles

## üîó R√©f√©rences
- [Template de Base](mdc:xnotes/000-base-template.md)
- [Template de R√®gle Cursor](mdc:xnotes/000-base-rule-template.mdc)
- [Standards de Documentation Markdown](mdc:xnotes/400-md-docs-standardized.mdc)
- [M√©canismes d'Activation des R√®gles Cursor](mdc:https:/forum.cursor.com/t/a-deep-dive-into-cursor-rules-0-45/60721)

<version>3.0.0</version> 