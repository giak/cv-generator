---
description: "ALWAYS APPLY when GENERATING or MODIFYING code to ENSURE efficiency, maintainability and adherence to project standards"
globs: "**/*.{js,ts,jsx,tsx,java,py,html,css,scss}"
alwaysApply: false
---

# üß© Standard de G√©n√©ration de Code

## üìã Vue d'Ensemble
Cette r√®gle d√©finit les bonnes pratiques √† suivre lors de la g√©n√©ration ou modification de code. Elle vise √† garantir que le code produit soit simple, efficace, maintenable et strictement align√© avec les exigences document√©es dans les stories et les documents d'architecture.

> ‚ö†Ô∏è **Attention**: Cette r√®gle est fondamentale pour maintenir la qualit√© du code et √©viter la dette technique. Elle doit √™tre appliqu√©e lors de chaque t√¢che de d√©veloppement.

## üéØ Objectifs
- Assurer que le code g√©n√©r√© est minimal et focalis√© sur les exigences actuelles
- Pr√©venir la sur-ing√©nierie et les complexit√©s inutiles
- Garantir l'alignement avec l'architecture et les stories d√©finies
- √âviter les hallucinations et les suppositions non-document√©es
- Maintenir la coh√©rence avec les conventions du projet

## üìè Principes Fondamentaux

### Simplicit√© et Efficacit√©
- **KISS (Keep It Simple, Stupid)**: Pr√©f√©rez toujours la solution la plus simple qui r√©sout le probl√®me.
- **YAGNI (You Aren't Gonna Need It)**: N'ajoutez pas de fonctionnalit√©s "au cas o√π" - impl√©mentez uniquement ce qui est demand√© maintenant.
- **DRY (Don't Repeat Yourself)**: √âvitez la duplication de code, mais ne cr√©ez pas d'abstractions pr√©matur√©es.

### Minimalisme Cibl√©
- G√©n√©rez uniquement le code n√©cessaire √† l'impl√©mentation de la story/task actuelle
- Limitez la cr√©ation de nouveaux fichiers au strict n√©cessaire
- √âvitez d'anticiper des besoins futurs non sp√©cifi√©s dans les documents du projet

### Coh√©rence Contextuelle
- Consultez syst√©matiquement les documents de r√©f√©rence avant toute g√©n√©ration
- Respectez l'architecture existante et les patterns √©tablis
- R√©f√©rez-vous toujours aux crit√®res d'acceptation de la story en cours

## ‚úÖ Pratiques Recommand√©es

### Avant de G√©n√©rer du Code
1. **Analysez la story/task** pour comprendre pr√©cis√©ment son p√©rim√®tre
2. **Consultez le document d'architecture** pour identifier les patterns √† suivre
3. **Examinez le code existant** pour maintenir la coh√©rence stylistique

### Pendant la G√©n√©ration
1. **Privil√©giez la lisibilit√©** sur l'optimisation pr√©matur√©e
2. **Commentez les d√©cisions complexes** pour faciliter la maintenance
3. **Testez au fur et √† mesure** pour valider que le code r√©pond aux exigences

### Apr√®s la G√©n√©ration
1. **R√©visez le code** pour √©liminer tout √©l√©ment non n√©cessaire
2. **V√©rifiez l'alignement** avec les crit√®res d'acceptation
3. **Documentez les choix d'impl√©mentation** importants

## ‚ùå Anti-Patterns √† √âviter

### G√©n√©ration Excessive
- Cr√©ation de fichiers "qui pourraient √™tre utiles plus tard"
- Impl√©mentation de fonctionnalit√©s non sp√©cifi√©es dans la story
- Ajout de code "au cas o√π" ou pour des sc√©narios hypoth√©tiques

### Sur-Ing√©nierie
- Abstractions complexes pour des cas simples
- Optimisations pr√©matur√©es sans donn√©es de performance
- Frameworks ou librairies suppl√©mentaires non justifi√©s

### Hallucinations
- Suppositions sur des exigences non document√©es
- Invention de fonctionnalit√©s non demand√©es
- Ignorance des contraintes sp√©cifi√©es dans les documents du projet

## üîÑ Int√©gration avec le Workflow
Cette r√®gle doit √™tre appliqu√©e √† chaque √©tape du cycle de d√©veloppement d√©fini dans la r√®gle `801-workflow-agile-standardized`. Elle est particuli√®rement importante lors de:
1. L'impl√©mentation des stories
2. La r√©solution des bugs
3. Les revues de code
4. Les refactorisations

---

*Version: 1.0.0* 