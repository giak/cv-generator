---
description: "ALWAYS FOLLOW this workflow for ALL projects to ENSURE consistent agile delivery and documentation"
globs: "**/*.{md,js,ts,jsx,tsx}"
alwaysApply: false
---

# üîÑ Workflow Agile Standard

## üìã Vue d'Ensemble
Cette r√®gle d√©finit le workflow agile √† suivre pour tous les projets. Elle garantit une approche structur√©e et coh√©rente pour la planification, le d√©veloppement et le suivi des projets, avec une attention particuli√®re √† la documentation et √† la qualit√©.

> ‚ö†Ô∏è **Attention**: Ce workflow est fondamental pour les syst√®mes de m√©moire du projet. Toutes les informations de planification, de compl√©tion et de modifications doivent √™tre enregistr√©es dans le dossier `.ai`.

## üéØ Objectifs
- Assurer une approche coh√©rente pour tous les projets
- Garantir une documentation compl√®te et √† jour
- Faciliter le d√©veloppement it√©ratif et incr√©mental
- Maintenir une haute qualit√© gr√¢ce au TDD
- Conserver une trace historique claire des d√©cisions et du progr√®s

## ‚úÖ Requirements

- V√©rifier et cr√©er un fichier PRD avant toute autre activit√©
- Raffiner le PRD jusqu'√† approbation avant de passer √† l'architecture
- G√©n√©rer et faire approuver le document d'architecture avant de cr√©er les stories
- Utiliser le template de story standardis√© pour toutes les stories
- Impl√©menter le TDD avec une couverture de tests d'au moins 80%
- Mettre √† jour les fichiers de story au fur et √† mesure de l'avancement
- Conserver toute la documentation dans le dossier `.ai`
- Ne jamais commencer le travail sur une story sans approbation pr√©alable

## üìù Processus √âtape par √âtape

### 1Ô∏è‚É£ Initialisation du Projet
1. √Ä l'initialisation, v√©rifier si un fichier `.ai/prd.md` existe
2. Si le PRD n'existe pas, travailler avec l'utilisateur pour cr√©er un document complet

### 2Ô∏è‚É£ Am√©lioration du PRD
Le PRD doit inclure:
- Objectif d√©taill√© et probl√®mes r√©solus
- S√©quence de t√¢ches d√©taill√©e
- Mod√®les d'architecture et d√©cisions techniques cl√©s
- Diagrammes Mermaid pour visualiser l'architecture
- Technologies, configuration et contraintes
- Inconnues, hypoth√®ses et risques

### 3Ô∏è‚É£ Documentation d'Architecture
1. Une fois le PRD approuv√©, g√©n√©rer le document `.ai/arch.md` (brouillon)
2. Attendre l'approbation du document d'architecture avant de continuer

### 4Ô∏è‚É£ Cr√©ation et Gestion des Stories
1. Apr√®s l'approbation de l'architecture, cr√©er le brouillon de la premi√®re story
2. Utiliser le template standardis√© pour toutes les stories
3. Nommer les stories selon la convention: `.ai/story-{N}.story.md` ou `.ai/task-{N}.story.md`
4. Attendre l'approbation de la story avant de commencer le travail

### 5Ô∏è‚É£ D√©veloppement It√©ratif
1. Impl√©menter le TDD pour chaque sous-t√¢che avec 80% de couverture minimale
2. Mettre √† jour le fichier de story √† la compl√©tion de chaque sous-t√¢che
3. Une fois la story termin√©e, g√©n√©rer le brouillon de la story suivante
4. Attendre l'approbation avant de continuer sur la prochaine story

## üîÑ Cycle de D√©veloppement
1. **Cr√©ation de Branches**: Cr√©ez une branche d√©di√©e pour chaque story
2. **D√©veloppement Test-Driven**: Commencez par √©crire des tests pour les crit√®res d'acceptation
3. **Impl√©mentation It√©rative**: Impl√©mentez le code en petites incr√©mentations, en faisant passer les tests
4. **Revue de Code**: Soumettez votre code √† une revue par les pairs
5. **Int√©gration Continue**: Fusionnez r√©guli√®rement la branche principale dans votre branche
6. **Mise √† Jour de l'√âtat**: Mettez √† jour l'√©tat de la story dans `.ai/stories/`.

## üß© Directives de G√©n√©ration de Code
1. **Simplicit√© avant tout**: Respectez les principes KISS (Keep It Simple, Stupid), YAGNI (You Aren't Gonna Need It) et DRY (Don't Repeat Yourself)
2. **Minimalisme cibl√©**: G√©n√©rez uniquement le code n√©cessaire √† l'impl√©mentation de la t√¢che actuelle, sans anticiper des besoins futurs non sp√©cifi√©s
3. **Coh√©rence contextuelle**: R√©f√©rez-vous syst√©matiquement aux r√®gles du projet, documents d'architecture et sp√©cifications des stories/tasks actuelles

### ‚úÖ Pratiques √† Suivre
- Concevez la solution la plus simple r√©pondant aux crit√®res d'acceptation
- Limitez strictement l'impl√©mentation au p√©rim√®tre d√©fini dans la story/task
- Consultez les documents de r√©f√©rence (PRD, Architecture) avant toute g√©n√©ration
- Privil√©giez les approches modulaires et la r√©utilisation du code existant
- Documentez clairement les d√©cisions d'impl√©mentation

### ‚ùå Pratiques √† √âviter
- G√©n√©rer du code "au cas o√π" ou pour des fonctionnalit√©s futures
- Cr√©er de nouveaux fichiers/composants sans justification claire
- Introduire des abstractions pr√©matur√©es ou des sur-optimisations
- S'√©carter des patterns et conventions √©tablis dans le projet
- Assumer des exigences non-document√©es dans les sp√©cifications

## üîÑ Activit√©s Durant le D√©veloppement

- Mettre √† jour les fichiers de story √† la compl√©tion de chaque sous-t√¢che
- En cas de doute, consulter le PRD, l'architecture, et les stories
- √Ä la commande "update story", mettre √† jour l'√©tat actuel et les prochaines √©tapes
- V√©rifier continuellement que la story est correcte et que les prochaines √©tapes sont claires

## üöÄ Actions Automatis√©es Permises

Les actions suivantes peuvent √™tre r√©alis√©es sans demande explicite:

1. Cr√©er le fichier de story suivant si aucun n'existe
2. Ex√©cuter les tests unitaires jusqu'√† r√©ussite
3. Mettre √† jour les crit√®res d'acceptation et les t√¢ches compl√©t√©es
4. Maintenir le journal de communication dans le fichier de story

## üí° Exemples

<example>
**Bon exemple de workflow agile**:

1. V√©rification initiale: Aucun fichier `.ai/prd.md` n'existe
2. Action: "Je vois que nous n'avons pas encore de document PRD. Travaillons ensemble pour d√©finir les exigences du projet. Quel est l'objectif principal de cette application?"
3. Apr√®s discussion: "Voici le brouillon du PRD bas√© sur notre discussion. Il inclut l'objectif, les fonctionnalit√©s principales, l'architecture propos√©e, et les technologies recommand√©es."
4. Apr√®s approbation du PRD: "Maintenant que le PRD est approuv√©, je vais cr√©er le document d'architecture avec les diagrammes des composants principaux."
5. Apr√®s approbation de l'architecture: "Voici le brouillon de la premi√®re story pour impl√©menter l'authentification des utilisateurs. Elle inclut les crit√®res d'acceptation et les t√¢ches d√©taill√©es."
6. Pendant le d√©veloppement: "J'ai termin√© les tests pour la validation des entr√©es. Tous les tests passent avec une couverture de 92%. Je vais maintenant travailler sur l'int√©gration avec la base de donn√©es."
7. √Ä la fin de la story: "La story d'authentification est maintenant termin√©e avec tous les tests passant. Voici le brouillon de la prochaine story pour la gestion des profils utilisateurs."

Ce workflow maintient une documentation claire, suit une approche TDD rigoureuse, et progresse de mani√®re it√©rative avec approbation √† chaque √©tape cl√©.
</example>

<example type="invalid">
**Exemple de workflow probl√©matique**:

1. Action imm√©diate: "Commen√ßons √† coder l'application. Je vais cr√©er la structure de fichiers et commencer par la page d'accueil."
2. Sans documentation: "J'ai impl√©ment√© quelques fonctionnalit√©s. Que voulez-vous que je fasse ensuite?"
3. Sans tests: "La fonctionnalit√© est termin√©e, passons √† la prochaine."
4. Sans suivi: "Je ne me souviens pas exactement o√π nous en √©tions, mais continuons avec la nouvelle fonctionnalit√© que vous avez mentionn√©e."

Ce workflow est probl√©matique car il:
1. Ne commence pas par un PRD et une architecture clairement d√©finis
2. Ne documente pas les exigences et les d√©cisions
3. N'utilise pas d'approche TDD
4. Ne maintient pas de trace du progr√®s
5. Ne suit pas un processus structur√© d'approbation
</example>

## ‚ö†Ô∏è Points Critiques

<critical>
- NE JAMAIS commencer le d√©veloppement sans un PRD approuv√©
- TOUJOURS conserver les informations du projet dans le dossier `.ai`
- MAINTENIR une documentation de haute qualit√© et √† jour
- En cas de DOUTE, consulter la documentation existante plut√¥t que de deviner
- DEMANDER de l'aide √† l'utilisateur si les informations disponibles sont insuffisantes
</critical>

## ‚úÖ Bonnes Pratiques

- **Documentation d'abord**: Commencer par d√©finir et documenter avant de coder
- **Approche it√©rative**: Progresser par petits incr√©ments bien d√©finis
- **TDD**: √âcrire les tests avant l'impl√©mentation
- **Communication claire**: Documenter les d√©cisions et tenir √† jour les stories
- **Approbation formelle**: Obtenir l'approbation avant de passer aux √©tapes suivantes
- **Tra√ßabilit√©**: Maintenir des liens clairs entre les stories, le PRD et l'architecture

## üîó R√©f√©rences
- [Template de Workflow Agile](mdc:xnotes/workflow-agile-standardized.md)
- [Template de PRD](mdc:xnotes/template-prd-standardized.md)
- [Template d'Architecture](mdc:xnotes/template-arch-standardized.md)
- [Template de Story](mdc:xnotes/template-story-standardized.md)

<version>2.0.0</version> 