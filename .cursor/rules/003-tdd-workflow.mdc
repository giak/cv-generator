---
description: ENFORCE Test-Driven Development workflow with Vitest in Vue 3 components to ensure robust and maintainable code
globs: src/**/*.{spec,test}.{ts,tsx}
---
# Test-Driven Development Workflow with Vitest

---
description: ENFORCE Test-Driven Development workflow with Vitest in Vue 3 components to ensure robust and maintainable code
globs: ["packages/**/*.{spec,test}.{ts,tsx}", "packages/**/__tests__/*.{ts,tsx}"]
tags: [testing, vitest, vue3, tdd, ddd]
priority: 1
version: 2.1.0
---

## Context
- Applied when developing new features or fixing bugs
- Ensures code quality through test-first approach
- Enforces clean and maintainable code
- Maintains high test coverage
- Follows DDD, Vue 3, Pinia, and Vitest best practices
- Supports monorepo architecture with multiple packages

## Test Environment Setup

### Core Package Configuration (packages/core/vitest.config.ts)
```typescript
import { defineConfig } from 'vitest/config'

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    coverage: {
      provider: 'istanbul',
      reporter: ['text', 'json', 'html'],
      all: true,
      include: ['src/**/*.ts'],
      exclude: ['src/**/*.d.ts', 'src/**/*.test.ts', 'src/**/*.spec.ts']
    },
    include: ['src/**/*.{test,spec}.ts']
  }
})
```

### UI Package Configuration (packages/ui/vitest.config.ts)
```typescript
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { resolve } from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
      '@cv': resolve(__dirname, './src/modules/cv'),
      '@shared': resolve(__dirname, './src/components/shared'),
      '@stores': resolve(__dirname, './src/stores'),
      '@composables': resolve(__dirname, './src/composables')
    }
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./vitest.setup.ts'],
    include: [
      'src/**/*.{test,spec}.{js,ts}',
      'src/**/__tests__/*.{js,ts}'
    ],
    exclude: ['e2e/**/*', 'node_modules/**/*'],
    coverage: {
      provider: 'istanbul',
      reporter: ['text', 'json', 'html'],
      all: true,
      include: ['src/**/*.{vue,ts}'],
      exclude: [
        'src/**/*.d.ts',
        'src/**/*.test.ts',
        'src/**/*.spec.ts',
        'src/main.ts',
        'src/types/**/*'
      ]
    }
  }
})
```

## DDD Testing Patterns

### 1. Domain Layer Testing

#### Value Objects Test Pattern
```typescript
// Phone.spec.ts
describe('Phone Value Object', () => {
  describe('create', () => {
    it('should create a valid Phone with international format', () => {
      const result = Phone.create('+33612345678')
      expect(result.isSuccess).toBe(true)
      if (!result.isSuccess) return
      const phone = result.getValue()
      expect(phone.toString()).toBe('+33612345678')
    })

    it('should fail with invalid phone format', () => {
      const result = Phone.create('invalid-phone')
      expect(result.isFailure).toBe(true)
      if (!result.isFailure) return
      expect(result.error).toContain('Format de téléphone invalide')
    })
  })

  describe('format', () => {
    it('should format international number correctly', () => {
      const phone = Phone.create('+33612345678').getValue()
      expect(phone.format()).toBe('+33 61 23 45 67')
    })
  })
})
```

#### Entity Test Pattern
```typescript
// Resume.spec.ts
describe('Resume Entity', () => {
  describe('create', () => {
    it('should create a valid Resume', () => {
      const result = Resume.create({
        basics: {
          name: 'John Doe',
          email: 'john@example.com'
        }
      })
      expect(result.isValid).toBe(true)
      expect(result.resume).toBeDefined()
    })

    it('should validate email format', () => {
      const result = Resume.create({
        basics: {
          name: 'John Doe',
          email: 'invalid-email'
        }
      })
      expect(result.isValid).toBe(false)
      expect(result.errors).toContain('Format email invalide')
    })
  })
})
```

### 2. Application Layer Testing

#### Use Case Test Pattern
```typescript
// ManageResume.spec.ts
describe('ManageResume Use Case', () => {
  const mockRepository = {
    load: vi.fn(),
    save: vi.fn(),
    export: vi.fn(),
    import: vi.fn()
  }

  const useCase = new ManageResume(mockRepository)

  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('createResume', () => {
    it('should create and save a valid resume', async () => {
      const data = {
        basics: {
          name: 'John Doe',
          email: 'john@example.com'
        }
      }

      await useCase.createResume(data)

      expect(mockRepository.save).toHaveBeenCalledWith(
        expect.objectContaining(data)
      )
    })
  })
})
```

### 3. Infrastructure Layer Testing

#### Repository Test Pattern
```typescript
// LocalStorageResumeRepository.spec.ts
describe('LocalStorageResumeRepository', () => {
  const repository = new LocalStorageResumeRepository()

  beforeEach(() => {
    localStorage.clear()
  })

  describe('save', () => {
    it('should save resume to localStorage', async () => {
      const data = {
        basics: {
          name: 'John Doe',
          email: 'john@example.com'
        }
      }

      await repository.save(data)

      const stored = JSON.parse(localStorage.getItem('resume') || '')
      expect(stored).toEqual(data)
    })
  })
})
```

### 4. UI Layer Testing

#### Store Test Pattern
```typescript
// resume.spec.ts
describe('Resume Store', () => {
  beforeEach(() => {
    setActivePinia(createPinia())
    vi.clearAllMocks()
  })

  describe('loadResume', () => {
    it('should load resume successfully', async () => {
      const store = useResumeStore()
      const mockResume = createMockResume()
      mockRepository.load.mockResolvedValue(mockResume)

      await store.loadResume()

      expect(store.resume).toEqual(mockResume)
      expect(store.loading).toBe(false)
      expect(store.error).toBeNull()
    })
  })
})
```

#### Component Test Pattern
```typescript
// ResumeForm.spec.ts
describe('ResumeForm.vue', () => {
  it('should emit save event with valid data', async () => {
    const wrapper = mount(ResumeForm, {
      global: {
        plugins: [createTestingPinia()]
      }
    })

    await wrapper.find('[data-test="name-input"]').setValue('John Doe')
    await wrapper.find('[data-test="email-input"]').setValue('john@example.com')
    await wrapper.find('form').trigger('submit')

    expect(wrapper.emitted('save')).toBeTruthy()
    expect(wrapper.emitted('save')[0][0]).toEqual({
      basics: {
        name: 'John Doe',
        email: 'john@example.com'
      }
    })
  })
})
```

## Testing Standards

### Code Coverage Requirements
<critical>
- NEVER commit code without tests
- NEVER skip unit tests for business logic
- NEVER write tests after implementation
- ALWAYS follow DDD layer testing patterns
- ALWAYS maintain minimum coverage:
  - Domain Layer: 100%
  - Application Layer: 100%
  - Infrastructure Layer: > 90%
  - UI Layer: > 90%
</critical>

### Test Organization
- Follow AAA pattern (Arrange-Act-Assert)
- Group related tests with describe blocks
- Clear test descriptions
- Proper test isolation
- Mock external dependencies
- Use beforeEach for common setup
- Clear mocks between tests
- Respect DDD layer boundaries in tests

### Mock Data Pattern
```typescript
// Domain Layer Mock
const mockResumeData: ResumeInterface = {
  basics: {
    name: 'John Doe',
    email: 'john@example.com'
  }
}

// Application Layer Mock
const mockRepository: ResumeRepository = {
  load: vi.fn(),
  save: vi.fn(),
  export: vi.fn(),
  import: vi.fn()
}

// UI Layer Mock
vi.mock('@cv-generator/core', () => ({
  Resume: {
    create: (data: ResumeInterface) => ({
      isValid: true,
      resume: {
        ...data,
        toJSON: () => ({ ...data })
      }
    })
  }
}))
```

## Best Practices
- Write tests before implementation
- Keep tests simple and focused
- Use meaningful test descriptions
- Maintain test isolation
- Mock external dependencies
- Follow the AAA pattern
- Use TypeScript for type safety
- Regular test maintenance
- Use expect.objectContaining for partial object matching
- Use vi.mock for dependency mocking
- Use createPinia and setActivePinia for store testing
- Clear mocks between tests with vi.clearAllMocks()
- Use proper type imports
- Separate type and value imports
- Respect DDD layer boundaries
- Test error cases thoroughly

## Performance Standards
- Domain Layer tests: < 50ms per test
- Application Layer tests: < 100ms per test
- Infrastructure Layer tests: < 200ms per test
- UI Layer tests: < 500ms per test
- Full suite: < 2min
- Watch mode for development

## Continuous Integration
- Run tests before commit
- Maintain coverage thresholds
- Regular test maintenance
- Update tests when requirements change
- Test all DDD layers independently