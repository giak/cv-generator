---
description: ENFORCE Test-Driven Development workflow with Vitest in Vue 3 components to ensure robust and maintainable code
globs: src/**/*.{spec,test}.{ts,tsx}
alwaysApply: false
---
---
description: ENFORCE Test-Driven Development workflow with Vitest in Vue 3 components to ensure robust and maintainable code
globs: ["packages/**/*.{spec,test}.{ts,tsx}", "packages/**/__tests__/*.{ts,tsx}"]
tags: [testing, vitest, vue3, tdd, ddd, composables, components]
priority: 1
version: 3.1.0
---

# Test-Driven Development Workflow with Vitest

## Context
- Applied when developing new features or fixing bugs
- Ensures code quality through test-first approach
- Enforces clean and maintainable code
- Maintains high test coverage
- Follows DDD, Vue 3, Pinia, and Vitest best practices
- Supports monorepo architecture with multiple packages
- Provides reusable test patterns and snippets
- Enforces co-location of tests with the code they test

## The TDD Cycle

### Red-Green-Refactor
The TDD workflow follows a strict cycle:

1. **RED**: Write a failing test first
   - Define the expected behavior before implementation
   - Ensure the test fails for the right reason
   - Commit the failing test

2. **GREEN**: Write minimal code to make the test pass
   - Focus on functionality, not perfection
   - Avoid over-engineering at this stage
   - Commit the passing implementation

3. **REFACTOR**: Improve the code while keeping tests green
   - Eliminate duplication
   - Improve naming and structure
   - Apply SOLID principles
   - Ensure tests continue to pass

### Example TDD Workflow for a Vue Component
```bash
# 1. RED: Create test file alongside the component
$ mkdir -p src/components/Feature/__tests__
$ touch src/components/Feature/__tests__/Feature.spec.ts

# Write failing test in Feature.spec.ts
# Commit the failing test

# 2. GREEN: Implement the minimal component to pass tests
$ touch src/components/Feature/Feature.vue
# Implement the minimal required code
# Run tests to verify they pass
$ pnpm test
# Commit the passing implementation

# 3. REFACTOR: Improve code quality
# Refactor the component while keeping tests passing
# Commit the refactored code
```

## Test Environment Setup

### Base Vitest Configuration (vitest.config.ts)
```typescript
import { defineConfig } from 'vitest/config'
import vue from '@vitejs/plugin-vue'
import { resolve } from 'path'

export default defineConfig({
  plugins: [vue()],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./vitest.setup.ts'],
    coverage: {
      provider: 'istanbul',
      reporter: ['text', 'json', 'html', 'lcov'],
      all: true,
      include: ['src/**/*.{vue,ts}'],
      exclude: [
        'src/**/*.d.ts',
        'src/**/*.test.ts',
        'src/**/*.spec.ts',
        'src/main.ts',
        'src/types/**/*'
      ]
    },
    reporters: ['default', 'html'],
    include: [
      'src/**/*.{test,spec}.{js,ts}',
      'src/**/__tests__/*.{js,ts}'
    ],
    exclude: ['e2e/**/*', 'node_modules/**/*']
  },
  resolve: {
    alias: {
      '@ui': resolve(__dirname, './src'),
      '@ui/components': resolve(__dirname, './src/components'),
      '@ui/composables': resolve(__dirname, './src/composables'),
      '@ui/modules': resolve(__dirname, './src/modules'),
      '@ui/test-utils': resolve(__dirname, './src/test-utils')
    }
  }
})
```

### Setup File (vitest.setup.ts)
```typescript
import { expect, vi, beforeAll, afterAll } from 'vitest'
import { cleanup } from '@testing-library/vue'
import matchers from '@testing-library/jest-dom/matchers'
import { setActivePinia, createPinia } from 'pinia'
import { config } from '@vue/test-utils'

// Extend matchers
expect.extend(matchers)

// Global test setup
beforeAll(() => {
  // Mock ResizeObserver
  global.ResizeObserver = vi.fn().mockImplementation(() => ({
    observe: vi.fn(),
    unobserve: vi.fn(),
    disconnect: vi.fn(),
  }))

  // Mock IntersectionObserver
  global.IntersectionObserver = vi.fn().mockImplementation(() => ({
    observe: vi.fn(),
    unobserve: vi.fn(),
    disconnect: vi.fn(),
  }))
})

// Global test cleanup
afterAll(() => {
  cleanup()
})

// Configure Vue Test Utils
config.global.stubs = {
  transition: false,
  'router-link': true
}
```

## Test Patterns Library

### 1. Composable Test Pattern
```typescript
// useZodFieldValidation.test.ts
import { describe, it, expect } from 'vitest'
import { renderComposable } from '@ui/test-utils'
import { useZodFieldValidation } from '@ui/composables/useZodFieldValidation'
import { z } from 'zod'

describe('useZodFieldValidation', () => {
  const schema = z.object({
    name: z.string().min(1, 'Le nom est requis'),
    email: z.string().email('Format email invalide')
  })
  
  it('should return no errors for valid data', () => {
    const { result } = renderComposable(() => useZodFieldValidation(schema))
    
    const valid = result.validate({
      name: 'John Doe',
      email: 'john@example.com'
    })
    
    expect(valid).toBe(true)
    expect(result.errors.value).toEqual({})
  })
  
  it('should return errors for invalid data', () => {
    const { result } = renderComposable(() => useZodFieldValidation(schema))
    
    const valid = result.validate({
      name: '',
      email: 'invalid-email'
    })
    
    expect(valid).toBe(false)
    expect(result.errors.value).toEqual({
      name: 'Le nom est requis',
      email: 'Format email invalide'
    })
  })
})
```

### 2. Component Test Pattern
```typescript
// BasicsForm.spec.ts
import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import { createTestingPinia } from '@pinia/testing'
import type { BasicsInterface } from '@cv-generator/shared/src/types/resume.interface'
import BasicsForm from '../BasicsForm.vue'
import { nextTick } from 'vue'

const mockBasics: BasicsInterface = {
  name: 'John Doe',
  email: 'john@example.com',
  label: 'Software Engineer'
}

describe('BasicsForm', () => {
  const mountComponent = (props = {}) => {
    return mount(BasicsForm, {
      props: {
        modelValue: mockBasics,
        ...props
      },
      global: {
        plugins: [createTestingPinia()]
      }
    })
  }

  describe('rendering', () => {
    it('should render all required fields', () => {
      const wrapper = mountComponent({
        modelValue: {
          name: '',
          email: '',
          label: 'Software Engineer'
        }
      })

      expect(wrapper.find('[data-test="name-input"]').exists()).toBe(true)
      expect(wrapper.find('[data-test="email-input"]').exists()).toBe(true)
      expect(wrapper.find('[data-test="label-input"]').exists()).toBe(true)
    })
  })

  describe('validation', () => {
    it('should show error for empty required fields', async () => {
      const wrapper = mountComponent({
        modelValue: {
          name: '',
          email: '',
          label: 'Software Engineer'
        }
      })

      await wrapper.find('form').trigger('submit.prevent')
      await nextTick()
      
      const nameError = wrapper.find('[data-test="name-error"]')
      expect(nameError.exists()).toBe(true)
      expect(nameError.text()).toBe('Le nom est requis')
    })
  })

  describe('events', () => {
    it('should emit update:modelValue on field change', async () => {
      const wrapper = mountComponent()

      await wrapper.find('[data-test="name-input"]').setValue('Jane Doe')

      expect(wrapper.emitted('update:modelValue')).toBeTruthy()
      expect(wrapper.emitted('update:modelValue')[0][0]).toEqual({
        name: 'Jane Doe',
        email: 'john@example.com',
        label: 'Software Engineer'
      })
    })
  })
})
```

### 3. Store Test Pattern
```typescript
// resume.spec.ts
import { describe, it, expect, beforeEach, vi } from 'vitest'
import { setActivePinia, createPinia } from 'pinia'
import { useResumeStore } from '../resume'
import type { ResumeInterface } from '@cv-generator/shared/src/types/resume.interface'

describe('Resume Store', () => {
  beforeEach(() => {
    setActivePinia(createPinia())
  })

  describe('loadResume', () => {
    it('should load resume successfully', async () => {
      const store = useResumeStore()
      const mockResume: ResumeInterface = {
        basics: { name: 'John Doe', email: 'john@example.com' },
        work: [],
        education: [],
        skills: []
      }
      
      store.loadFromStorage = vi.fn().mockResolvedValue(mockResume)
      
      await store.loadResume()
      
      expect(store.resume).toEqual(mockResume)
      expect(store.isLoading).toBe(false)
      expect(store.error).toBe(null)
    })

    it('should handle load error', async () => {
      const store = useResumeStore()
      const error = new Error('Load failed')
      
      store.loadFromStorage = vi.fn().mockRejectedValue(error)
      
      await store.loadResume()
      
      expect(store.isLoading).toBe(false)
      expect(store.error).toBe(error)
    })
  })
})
```

## Testing Standards

### Code Coverage Requirements
<critical>
- NEVER commit code without tests
- NEVER skip unit tests for business logic
- NEVER write tests after implementation
- ALWAYS follow DDD layer testing patterns
- ALWAYS maintain minimum coverage:
  - Domain Layer: 100%
  - Application Layer: 100%
  - Infrastructure Layer: > 90%
  - UI Layer: > 90%
  - Composables: 100%
</critical>

### Test Structure and Organization
- Co-locate tests with the code they test
- Use the `__tests__` directory pattern
- Follow naming conventions:
  - Component tests: `ComponentName.spec.ts` 
  - Composable tests: `useFeature.test.ts` or `useFeature.spec.ts`
- Group related tests with describe blocks:
  - `describe('ComponentName')` for the main component
  - Nested describes for features: `describe('rendering')`, `describe('validation')`, `describe('events')`
- Follow AAA pattern (Arrange-Act-Assert) in each test
- Clear test descriptions that explain what is being tested
- Proper test isolation with beforeEach cleanup
- Mock external dependencies
- Use setup helpers for common test scenarios

### Test Utilities
```typescript
// src/test-utils/index.ts
import { ref, type Ref } from 'vue'

/**
 * Helper for testing composables
 */
export function renderComposable<T>(composable: () => T) {
  const result = composable()
  return { result }
}

/**
 * Helper to create a reactive value for testing
 */
export function createReactive<T>(initialValue: T): Ref<T> {
  return ref(initialValue)
}

/**
 * Helper to wait for next tick
 */
export async function waitForNextTick() {
  return new Promise(resolve => setTimeout(resolve, 0))
}

/**
 * Helper to create mock data
 */
export function createMockBasics() {
  return {
    name: 'John Doe',
    email: 'john@example.com',
    label: 'Software Engineer'
  }
}
```

## Best Practices

### Component Testing
- Test rendering of all important elements
- Test conditional rendering (if/else blocks)
- Test user interactions (clicks, input changes)
- Test events emitted by the component
- Test validation and error states
- Use data-test attributes for test selectors
- Avoid testing implementation details
- Focus on component behavior and contracts

### Composable Testing
- Test all public methods and properties
- Test success and error cases
- Test with different input parameters
- Test edge cases (empty values, null, undefined)
- Test reactivity behavior
- Isolate from external dependencies using mocks

### General Best Practices
- Write tests first (Red-Green-Refactor)
- Keep tests simple and focused
- Use meaningful test descriptions
- Match test structure to component/feature structure
- Mock external dependencies
- Clear mocks between tests
- Follow the principle: "Test behavior, not implementation"
- Use TypeScript for type safety
- Prefer specific assertions over generic ones
- Test error handling thoroughly
- Regularly run tests to catch regressions

## Continuous Integration
- Run tests before commit
- Maintain coverage thresholds
- Update tests when requirements change
- Test all modules independently
- Automated test runs on PR
- Performance monitoring
- Test result reporting

## Examples

<example>
// Good TDD Workflow Example
// 1. First, write a failing test
// src/components/ValidationMessage/__tests__/ValidationMessage.spec.ts
import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import ValidationMessage from '../ValidationMessage.vue'

describe('ValidationMessage', () => {
  it('should render error message when provided', () => {
    const wrapper = mount(ValidationMessage, {
      props: {
        message: 'This field is required'
      }
    })
    
    expect(wrapper.text()).toContain('This field is required')
    expect(wrapper.classes()).toContain('text-red-500')
  })
  
  it('should not render anything when no message is provided', () => {
    const wrapper = mount(ValidationMessage, {
      props: {
        message: ''
      }
    })
    
    expect(wrapper.html()).toBe('')
  })
})

// 2. Then, implement the component to make tests pass
// src/components/ValidationMessage/ValidationMessage.vue
<template>
  <div v-if="message" class="text-red-500 text-sm mt-1">
    {{ message }}
  </div>
</template>

<script setup lang="ts">
defineProps<{
  message: string
}>()
</script>

// 3. Finally, refactor if needed while keeping tests green
</example>

<example type="invalid">
// Poor Testing Practice - No TDD
// First implementing the code without tests
// src/components/ValidationMessage/ValidationMessage.vue
<template>
  <div v-if="message" class="text-red-500 text-sm mt-1">
    {{ message }}
  </div>
</template>

<script setup lang="ts">
defineProps<{
  message: string
}>()
</script>

// Then adding tests after implementation
// Tests in wrong location (not co-located with component)
// src/tests/ValidationMessage.spec.ts
import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import ValidationMessage from '../components/ValidationMessage/ValidationMessage.vue'

describe('ValidationMessage', () => {
  it('works', () => {
    const wrapper = mount(ValidationMessage, {
      props: {
        message: 'Error'
      }
    })
    expect(wrapper.find('div').exists()).toBe(true)
  })
})
</example>