---
description: "ALWAYS use when WRITING or UPDATING Markdown files to ENSURE consistent formatting and readability"
globs: "**/*.{md,mdx,markdown}"
alwaysApply: false
---

# üìù Standards de Documentation Markdown

## üìã Vue d'Ensemble
Cette r√®gle d√©finit les standards pour la cr√©ation et la mise √† jour de fichiers Markdown dans tout le projet. Elle assure que tous les documents suivent un formatage coh√©rent, ce qui am√©liore la lisibilit√©, la maintenabilit√© et l'int√©gration avec les outils de documentation.

> ‚ö†Ô∏è **Attention**: La qualit√© de la documentation est directement li√©e √† sa lisibilit√© et sa structure. Tous les documents Markdown doivent respecter ces standards.

## üéØ Objectifs
- Assurer un formatage coh√©rent dans tous les documents Markdown
- Am√©liorer la lisibilit√© et la navigabilit√© des documents
- Faciliter la maintenance √† long terme de la documentation
- Optimiser les documents pour une pr√©sentation correcte sur diff√©rentes plateformes
- Standardiser l'utilisation des √©l√©ments visuels comme les diagrammes et les tableaux

## ‚úÖ Requirements

- Suivre la [Syntaxe Markdown officielle](mdc:https:/www.markdownguide.org) pour tous les √©l√©ments de base et √©tendus
- Maintenir une structure de document claire et une hi√©rarchie logique des titres
- Inclure les m√©tadonn√©es appropri√©es quand requis (front matter YAML)
- Utiliser des diagrammes Mermaid pour la documentation visuelle quand appropri√©
- Appliquer des conventions de formatage coh√©rentes dans tous les documents
- Utiliser les callouts standardis√©s pour les avertissements, notes et astuces
- Structurer les tableaux de mani√®re lisible et consistante

## üìù R√®gles de Formatage

### 1Ô∏è‚É£ Titres
- Utiliser les titres de style ATX (avec di√®se) avec un espace apr√®s le di√®se: `# Titre`
- Maintenir une hi√©rarchie appropri√©e des titres (ne pas sauter de niveaux)
- Profondeur maximale des titres: 4 niveaux
- Ajouter une ligne vide avant et apr√®s les titres
- Premi√®re lettre en majuscule, reste en minuscules (sauf noms propres)

### 2Ô∏è‚É£ Structure du Texte
- Utiliser des listes √† puces pour les √©l√©ments sans ordre pr√©cis
- Utiliser des listes num√©rot√©es pour les s√©quences ou instructions
- Indenter le contenu dans les balises XML de 2 espaces
- Fermer les balises XML sur leur propre ligne au niveau d'indentation parent
- Limiter la longueur des lignes √† 120 caract√®res maximum
- Ajouter une ligne vide entre les paragraphes

### 3Ô∏è‚É£ √âl√©ments Sp√©ciaux

#### Callouts
Utiliser des blockquotes avec emoji pour diff√©rents types d'alertes:

```markdown
> üö® **Attention:** Information critique.

> üí° **Astuce:** Suggestion utile.

> ‚ÑπÔ∏è **Note:** Contexte additionnel.
```

#### Blocs de Code
- Utiliser des triple backticks avec sp√©cification du langage
- Indenter correctement les blocs de code
- Ajouter une ligne vide avant et apr√®s
- Utiliser du code inline pour les r√©f√©rences courtes

```markdown
```javascript
function exemple() {
  console.log('Bonjour, monde!');
}
```

R√©f√©rencer la fonction `exemple()` en ligne.
```

#### Tableaux
- Utiliser des indicateurs d'alignement
- Inclure une ligne s√©paratrice d'en-t√™te
- Garder les tableaux simples et lisibles
- Ajouter des lignes vides avant et apr√®s

```markdown
| Nom     | Type   | Description      |
|:--------|:------:|----------------:|
| id      | nombre | Cl√© primaire    |
| nom     | texte  | Nom utilisateur |
```

## üìä Diagrammes Mermaid

### Quand Utiliser Mermaid
- Flux de travail simples et complexes n√©cessitant une visualisation
- Architecture syst√®me √† expliquer
- Flux de processus avec branches multiples
- Transitions d'√©tat √† clarifier
- Arbres de d√©cision IA √† cartographier

### Bonnes Pratiques pour les Diagrammes
1. Inclure des titres clairs en utilisant la syntaxe `---`
2. Utiliser des √©tiquettes de n≈ìuds descriptives
3. Ajouter des commentaires pour les flux complexes
4. Regrouper les composants li√©s en utilisant des sous-graphes
5. Utiliser une direction coh√©rente (TD/LR/TB)
6. Garder les diagrammes concentr√©s et sp√©cifiques

```markdown
```mermaid
---
title: Exemple de Flux de Travail
---
graph TD
    A[D√©but] --> B{D√©cision}
    B -->|Oui| C[Processus 1]
    B -->|Non| D[Processus 2]
    C --> E[Fin]
    D --> E
```
```

## üí° Exemples

<example>
**Bon Document Markdown**:

```markdown
# Guide de l'API

## Introduction

Ce document d√©crit l'API RESTful pour notre service de gestion d'utilisateurs.

## Endpoints

### Utilisateurs

#### Obtenir tous les utilisateurs

> ‚ÑπÔ∏è **Note:** Cette requ√™te supporte la pagination.

```http
GET /api/users
```

| Param√®tre | Type   | Description                  |
|:----------|:-------|:-----------------------------|
| page      | nombre | Page √† r√©cup√©rer (d√©faut: 1) |
| limit     | nombre | Nombre par page (max: 100)   |

##### Exemple de R√©ponse

```json
{
  "users": [
    {
      "id": 1,
      "name": "Jean Dupont",
      "email": "jean@exemple.fr"
    }
  ],
  "total": 50,
  "page": 1
}
```

## Flux d'Authentification

```mermaid
---
title: Processus d'Authentification
---
sequenceDiagram
    Client->>API: 1. Demande de connexion
    API->>Auth Service: 2. V√©rification des identifiants
    Auth Service->>Database: 3. Validation utilisateur
    Database-->>Auth Service: 4. Donn√©es utilisateur
    Auth Service-->>API: 5. G√©n√©ration de token
    API-->>Client: 6. Retourne le token JWT
```
```

Ce document:
1. Utilise une hi√©rarchie de titres appropri√©e
2. Inclut des exemples de code avec sp√©cification de langage
3. Contient un tableau bien format√©
4. Utilise des blockquotes pour les notes importantes
5. Int√®gre un diagramme Mermaid clairement titr√©
6. Maintient une structure coh√©rente et lisible
</example>

<example type="invalid">
**Document Markdown Probl√©matique**:

```markdown
#API Guide
This is our API

##endpoints
get users: /api/users
parameters:
page: page number
limit: number of users

example:
{
users: [{id:1,name:"John"}],
total:50
}

diagram:
```mermaid
graph
A-->B
B-->C
```
```

Ce document est probl√©matique car il:
1. N'a pas d'espace apr√®s les di√®ses des titres
2. Ne suit pas une hi√©rarchie de titres coh√©rente
3. Ne formate pas correctement le code JSON
4. N'utilise pas de tableaux pour les param√®tres
5. Pr√©sente un diagramme sans titre ni √©tiquettes descriptives
6. Manque de structure et de formatage coh√©rent
</example>

## ‚úÖ Bonnes Pratiques

- **Coh√©rence**: Maintenir le m√™me style de formatage dans tout le document
- **Clart√©**: Utiliser une structure qui guide naturellement le lecteur
- **Hi√©rarchie**: Suivre une progression logique des titres et sous-titres
- **Visuel**: Utiliser des tableaux et diagrammes pour simplifier les concepts complexes
- **Espacement**: Utiliser des lignes vides pour am√©liorer la lisibilit√©
- **Callouts**: Mettre en √©vidence les informations importantes avec des blockquotes
- **Exemples**: Fournir des exemples concrets pour les concepts abstraits
- **Code**: Toujours sp√©cifier le langage dans les blocs de code

## üîó R√©f√©rences
- [Guide de Syntaxe Markdown de Base](mdc:https:/www.markdownguide.org/basic-syntax)
- [Guide de Syntaxe Markdown √âtendue](mdc:https:/www.markdownguide.org/extended-syntax)
- [Documentation Mermaid](mdc:https:/mermaid.js.org/intro)
- [Template de Documentation](mdc:xnotes/000-base-template.md)

<version>2.0.0</version> 