---
description: DEFINE core project architecture, technical stack, and development principles for the CV Generator application
globs: src/**/*
---
---
description: DEFINE core project architecture, technical stack, and development principles for the CV Generator application
globs: ["src/**/*", "packages/**/*"]
tags: ["architecture", "standards", "typescript", "vue", "clean-architecture"]
priority: 1
version: 1.2.0
---

# CV Generator - Project Overview & Technical Standards

## Project Identity
Le CV Generator est une application web moderne dédiée à la création, la gestion et la génération de CV au format JSON Resume, HTML et PDF. L'application est construite avec une architecture modulaire basée sur les principes SOLID, Domain-Driven Design (DDD), Clean Architecture et Test-Driven Development (TDD) pour garantir évolutivité, maintenabilité et robustesse.

## Technical Stack

### Core Technologies
- pnpm 10+
- TypeScript 5.7+
- Node.js 22+
- Vue.js 3.4+ avec Composition API
- Pinia pour la gestion d'état
- Tailwind CSS 4 (via Vite plugin)
- Vite 6+ pour bundling et développement
- Puppeteer (v24+) pour la génération de PDF
- Zod pour la validation des schémas
- Vitest 3+ pour les tests unitaires et d'intégration
- Playwright pour les tests E2E
- Biome pour le linting et le formatting

## Project Structure

### Monorepo Organization
```
/
├── packages/                    # Monorepo workspace
│   ├── core/                   # Domain & Application layers
│   │   └── src/
│   │       └── modules/
│   │           └── cv/
│   │               ├── domain/     # Domain layer
│   │               │   ├── entities/   # Domain entities
│   │               │   ├── validators/ # Schema validation
│   │               │   └── shared/     # Shared domain logic
│   │               └── application/ # Application layer
│   │                   └── use-cases/  # Business use cases
│   ├── ui/                    # Presentation layer
│   │   └── src/
│   │       ├── components/    # Vue components
│   │       ├── composables/   # Vue composables
│   │       └── pages/        # Vue pages/routes
│   ├── infrastructure/        # Infrastructure layer
│   │   └── src/
│   │       ├── repositories/  # Data persistence
│   │       └── services/     # External services
│   └── shared/               # Shared utilities
│       └── src/
│           ├── types/        # Shared TypeScript types
│           └── validators/   # Shared validation schemas
```

## Naming Conventions

### TypeScript
- Interfaces MUST be suffixed with `Interface`
  ```typescript
  // ✅ Good
  export interface ResumeInterface {
    basics: BasicsInterface;
    work?: WorkInterface[];
  }
  
  // ❌ Bad
  export interface Resume {
    basics: Basics;
    work?: Work[];
  }
  ```

- Types MUST be suffixed with `Type`
  ```typescript
  // ✅ Good
  export type ValidationResultType = {
    isValid: boolean;
    errors?: string[];
  }
  
  // ❌ Bad
  export type ValidationResult = {
    isValid: boolean;
    errors?: string[];
  }
  ```

- Classes MUST use PascalCase without suffix
  ```typescript
  // ✅ Good
  export class Resume {
    static create(data: ResumeInterface): ValidationResultType
  }
  
  // ❌ Bad
  export class resumeClass {
    static create(data: Resume): ValidationResult
  }
  ```

### File Organization
- Entity files: `PascalCase.ts`
- Interface files: `PascalCase.interface.ts`
- Type files: `pascalCase.type.ts`
- Test files: `*.spec.ts` or `*.test.ts`
- Vue components: `PascalCase.vue`
- Composables: `use{Feature}.ts`

<critical>
- NEVER use barrel files (index.ts) for re-exporting
  ```typescript
  // ❌ Bad - index.ts
  export * from './resume.interface'
  export * from './resume.type'
  
  // ✅ Good - Import directly from source files
  import type { ResumeInterface } from './resume.interface'
  import type { ValidationResultType } from './resume.type'
  ```
</critical>

### Import Conventions
- ALWAYS import directly from source files
- NEVER use barrel imports
- Group imports by type (external, internal, types)
  ```typescript
  // External dependencies
  import { z } from 'zod'
  
  // Internal dependencies
  import { Resume } from '../entities/Resume'
  
  // Types
  import type { ResumeInterface } from '../types/resume.interface'
  import type { ValidationResultType } from '../types/resume.type'
  ```

## Architecture Principles

### Clean Architecture & DDD
- Séparation stricte des couches
- Dépendances orientées vers l'intérieur
- Interfaces clairement définies
- Entités immutables
- Value Objects pour les types complexes

### Domain Layer
```typescript
// Entity example with proper naming
export class Resume {
  private constructor(private readonly data: ResumeInterface) {}

  static create(data: ResumeInterface): ValidationResultType & { resume?: Resume } {
    const validation = resumeSchema.safeParse(data)
    // ... validation logic
  }

  toJSON(): ResumeInterface {
    return { ...this.data }
  }
}
```

### Validation Layer
```typescript
// Zod schema with proper naming
export const resumeSchema = z.object({
  basics: basicsSchema,
  work: z.array(workSchema).optional(),
  education: z.array(educationSchema).optional(),
  skills: z.array(skillSchema).optional()
}) satisfies z.ZodType<ResumeInterface>

export type ResumeSchemaType = z.infer<typeof resumeSchema>
```

## Development Standards

### TypeScript & Type Safety
<critical>
- NEVER use any type without explicit justification
- NEVER use non-suffixed interfaces or types
- NEVER mutate entity state directly
- NEVER expose internal implementation details
- NEVER use barrel files (index.ts)
- ALWAYS use proper type suffixes
- ALWAYS validate data at boundaries
- ALWAYS use immutable patterns
- ALWAYS document public APIs
- ALWAYS import directly from source files
</critical>

### Testing Strategy
- TDD as primary approach
- Test files must match source file name
- Each public method must have tests
- Use factory methods for test data
- Mock external dependencies

## Examples

<example>
// Good Practice - Direct imports and proper naming
import type { PersonInterface } from './person.interface'
import type { ValidationResultType } from './validation.type'

export class Person {
  private constructor(private readonly data: PersonInterface) {}

  static create(data: PersonInterface): ValidationResultType & { person?: Person } {
    // Validation and creation logic
  }

  toJSON(): PersonInterface {
    return { ...this.data }
  }
}
</example>

<example type="invalid">
// Poor Practice - Barrel imports and incorrect naming
import { Person, Validation } from './types'  // Using barrel import

export class PersonClass {  // Unnecessary Class suffix
  constructor(public data: Person) {}  // Mutable public property
}
</example>