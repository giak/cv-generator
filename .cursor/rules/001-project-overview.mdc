---
description: "DEFINE core project architecture, technical stack, and development principles for the CV Generator application"
globs: ["packages/**/*"]
alwaysApply: false
---
---
title: "CV Generator - Project Architecture & Technical Standards"
version: "2.3.0"
description: "DEFINE core project architecture, technical stack, and development principles for the CV Generator application"
globs: ["packages/**/*"]
lastUpdated: "2024-07-01"
tags: ["architecture", "standards", "monorepo", "ddd", "solid"]
---

# CV Generator - Project Architecture & Technical Standards

## Context
- This rule defines the architectural principles, technical stack, and development standards for the CV Generator application
- It serves as the central reference for understanding code organization and project structure
- All development work should align with these architectural decisions and coding standards
- This document references other critical standards including [naming conventions](mdc:.cursor/rules/002-naming-conventions.mdc) and [code generation standards](mdc:.cursor/rules/802-code-generation-standardized.mdc)

## Requirements
- The application MUST follow Clean Architecture principles with clear separation of concerns
- The codebase MUST be organized as a monorepo with well-defined package boundaries
- Domain logic MUST be implemented following Domain-Driven Design patterns
- All code MUST adhere to the SOLID principles and TypeScript standards defined in this document
- Validation MUST follow the multi-layer strategy described in this document
- All code MUST conform to the project's [naming conventions](mdc:.cursor/rules/002-naming-conventions.mdc)
- Code generation and modification MUST follow the [code generation standards](mdc:.cursor/rules/802-code-generation-standardized.mdc)

## Project Identity

The CV Generator is a modern web application for creating and managing resumes using the JSON Resume format. The architecture follows Clean Architecture and Domain-Driven Design principles to ensure clear separation of responsibilities, easy maintenance, and flexible system evolution.

## Technical Stack

| Technology   | Version | Description                             | Status      |
| ------------ | ------- | --------------------------------------- | ----------- |
| TypeScript   | 5.7+    | Primary language with strict typing     | ✅ In use   |
| Vue.js       | 3.4+    | UI framework with Composition API       | ✅ In use   |
| Vite         | 6.0+    | Build tool and dev server               | ✅ In use   |
| Pinia        | 2.1+    | State management                        | ✅ In use   |
| Tailwind CSS | 3.x     | Utility-first CSS framework             | ✅ In use   |
| Zod          | 3.22+   | Schema validation and runtime typing    | ✅ In use   |
| Vitest       | 3.0+    | Testing framework                       | ✅ In use   |
| Playwright   | Latest  | End-to-end testing                      | 🚧 Planned  |
| pnpm         | 10+     | Package manager with workspace support  | ✅ In use   |
| Biome        | 1.9+    | Linting and formatting                  | ✅ In use   |

## Key Architectural Decisions

### 1. Clean Architecture

- 🔄 Strict separation of layers (UI, Application, Domain, Infrastructure)
- 🔄 Dependencies pointing inward
- 🔄 Dependency inversion for repositories and services

### 2. Domain-Driven Design

- 📦 Organization by bounded contexts (CV, Export, User)
- 💎 Rich entities with encapsulated business logic
- 💠 Value Objects for complex types (Email, Phone)
- 📋 Aggregates for maintaining consistency (Resume)
- 🔌 Explicit port interfaces in each bounded context

### 3. Monorepo Structure

- 📂 Independent packages with clear responsibilities
- 🔄 Shared utilities for reuse
- 🧪 Co-located tests with implementation code

### 4. Validation Strategy

- ✅ Schema validation with Zod
- 🔄 Specialized composables for form validation
- 📝 Real-time validation with user feedback
- 🔀 Separation between UI validation and domain validation

## Project Structure

```
/
├── packages/                    # Monorepo workspace
│   ├── core/                    # Domain & Application layers
│   │   └── src/
│   │       ├── cv/              # CV Bounded Context
│   │       │   ├── domain/      # Domain layer
│   │       │   │   ├── entities/   # Domain entities
│   │       │   │   └── value-objects/ # Value Objects
│   │       │   ├── application/ # Application layer
│   │       │   │   └── use-cases/  # Business use cases
│   │       │   └── ports/       # Interface ports
│   │       │       └── repositories/ # Repository interfaces
│   │       ├── export/          # Export Bounded Context
│   │       │   ├── domain/      # Domain entities and logic
│   │       │   ├── application/ # Application services
│   │       │   └── ports/       # Interface ports
│   │       ├── user/            # User Bounded Context
│   │       │   ├── domain/      # User domain model
│   │       │   ├── application/ # User application services
│   │       │   └── ports/       # User interfaces
│   │       ├── shared/          # Shared domain elements
│   │       │   ├── domain/      # Shared domain concepts
│   │       │   └── application/ # Shared application logic
│   │       └── modules/         # Legacy/alternative organization
│   │
│   ├── ui/                      # Presentation layer
│   │   └── src/
│   │       ├── components/      # Vue components
│   │       │   └── shared/      # Shared components
│   │       ├── modules/         # Feature modules
│   │       │   └── cv/          # CV module
│   │       │       ├── presentation/ # Presentation components
│   │       │       └── stores/  # State management
│   │       ├── App/             # Application root
│   │       ├── plugins/         # Vue plugins
│   │       ├── assets/          # Static assets
│   │       └── core/            # Core UI logic
│   │
│   ├── infrastructure/          # Infrastructure layer
│   │   └── src/
│   │       ├── repositories/    # Data persistence implementations
│   │       ├── services/        # External service implementations
│   │       └── errors/          # Infrastructure-specific errors
│   │
│   └── shared/                  # Shared utilities
│       └── src/
│           ├── types/           # Shared TypeScript types
│           ├── validators/      # Shared validation logic
│           ├── schemas/         # Shared schema definitions
│           └── __tests__/       # Tests for shared code
```

## Package Responsibilities

### Core (@cv-generator/core)

- DDD bounded contexts organization:
  - **CV Context**: Resume entities, business logic, validation
  - **Export Context**: Export formats, conversion management
  - **User Context**: User management, preferences
  - **Shared**: Shared utilities (Result, ValidationError)
- Explicit port interfaces for dependency inversion
- TypeScript aliases by business context

### UI (@cv-generator/ui)

- Vue.js components and composables
- State management with Pinia
- Styling with Tailwind CSS
- Co-located unit tests

### Infrastructure (@cv-generator/infrastructure)

- Repository implementations
- External services and adapters
- Data persistence (LocalStorage)
- Error handling

### Shared (@cv-generator/shared)

- Shared types and utilities
- Validation schemas
- Common interfaces
- Test utilities

## Coding Standards

### SOLID Principles

- **S - Single Responsibility**: Each class, module, and function should have one responsibility
  - Example: A service class should either handle business logic OR data access, not both
  - Services, repositories, entities should have focused responsibilities

- **O - Open/Closed**: Software entities should be open for extension, closed for modification
  - Example: Use inheritance and interfaces to extend functionality without modifying existing code
  - Prefer composition over inheritance when appropriate

- **L - Liskov Substitution**: Subtypes must be substitutable for their base types
  - Example: Child classes must maintain all behaviors of parent classes
  - Interface implementations must honor the contract of the interface

- **I - Interface Segregation**: Many specific interfaces are better than one general-purpose interface
  - Example: Define focused repository interfaces rather than one large repository interface
  - Break large interfaces into smaller, more focused ones

- **D - Dependency Inversion**: Depend on abstractions, not concretions
  - Example: Core domain code should depend on port interfaces, not implementations
  - Use dependency injection to provide implementations at runtime

### TypeScript & Type Safety

- NEVER use any type without explicit justification
- NEVER use non-suffixed interfaces or types
- NEVER mutate entity state directly
- NEVER expose internal implementation details
- NEVER use barrel files (index.ts)
- ALWAYS use proper type suffixes
- ALWAYS validate data at boundaries
- ALWAYS use immutable patterns
- ALWAYS document public APIs
- ALWAYS import directly from source files

### Testing Strategy

- TDD as primary approach
- Tests MUST be co-located with the code they test
- Each public method or component MUST have tests
- Use factory methods for test data
- Mock external dependencies
- Test files MUST follow the naming pattern `*.spec.ts` or `*.test.ts`

### Code Generation Standards

The project follows standards for efficient, maintainable code generation as defined in the [code generation standards](mdc:.cursor/rules/802-code-generation-standardized.mdc). Key principles include:

- Follow KISS (Keep It Simple, Stupid), YAGNI (You Aren't Gonna Need It), and DRY (Don't Repeat Yourself)
- Generate only the code necessary for implementing the current task
- Maintain consistency with existing code patterns and architecture
- Avoid over-engineering and premature optimization
- Ensure all generated code follows project naming conventions

### Naming Conventions

The project enforces consistent naming conventions as defined in the [naming conventions rule](mdc:.cursor/rules/002-naming-conventions.mdc). These conventions ensure readability, maintainability, and searchability of the codebase.

## Examples

<example>
// Good: Properly structured domain entity with encapsulated logic
// packages/core/src/cv/domain/entities/Resume.ts
export class Resume {
  private readonly id: string;
  private basics: Basics;
  private skills: Skill[];
  
  constructor(params: ResumeParams) {
    this.id = params.id ?? uuidv4();
    this.basics = new Basics(params.basics);
    this.skills = params.skills.map(skill => new Skill(skill));
  }
  
  public getId(): string {
    return this.id;
  }
  
  public updateBasics(basics: BasicsParams): Result<Basics, ValidationError> {
    const validatedBasics = BasicsSchema.safeParse(basics);
    
    if (!validatedBasics.success) {
      return Result.failure(new ValidationError(validatedBasics.error));
    }
    
    this.basics = new Basics(validatedBasics.data);
    return Result.success(this.basics);
  }
  
  public toDTO(): ResumeDTO {
    return {
      id: this.id,
      basics: this.basics.toDTO(),
      skills: this.skills.map(skill => skill.toDTO())
    };
  }
}
</example>

<example type="invalid">
// Bad: Anemic model with no encapsulation, direct mutation, and no validation
// Avoid this approach:
export class Resume {
  public id: string;
  public basics: any;
  public skills: any[];
  
  constructor(data: any) {
    this.id = data.id;
    this.basics = data.basics;
    this.skills = data.skills;
  }
}

// Direct mutation from outside
const resume = new Resume(data);
resume.basics.name = "New Name"; // Bad: Direct mutation of internal state
</example>

<version>2.3.0</version>