---
description: DEFINE core project architecture, technical stack, and development principles for the CV Generator application
globs: ["packages/**/*"]
alwaysApply: false
---
---
title: CV Generator - Project Overview & Technical Standards
date: 2024-06-01
version: 2.1.0
status: approved
---

# CV Generator - Project Overview & Technical Standards

> Ce document fournit une vue d'ensemble du projet. Pour une documentation détaillée, y compris les diagrammes et explications complètes, veuillez consulter le fichier [ARCHITECTURE.md](mdc:ARCHITECTURE.md).

## Project Identity

Le CV Generator est une application web moderne pour la création et la gestion de CV au format JSON Resume. L'architecture suit les principes de Clean Architecture et Domain-Driven Design (DDD) pour assurer une séparation claire des responsabilités, une maintenance facilitée et une évolution flexible du système.

## Technical Stack

| Technology   | Version | Description                             | Status      |
| ------------ | ------- | --------------------------------------- | ----------- |
| TypeScript   | 5.7+    | Langage principal avec typage strict    | ✅ Utilisé  |
| Vue.js       | 3.4+    | Framework UI avec Composition API       | ✅ Utilisé  |
| Vite         | 5.0+    | Build tool et dev server                | ✅ Utilisé  |
| Pinia        | 2.1+    | State management                        | ✅ Utilisé  |
| Tailwind CSS | 4.0     | Utility-first CSS framework             | ✅ Utilisé  |
| Zod          | 3.22+   | Validation de schéma et typage runtime  | ✅ Utilisé  |
| Vitest       | 1.6+    | Framework de test                       | ✅ Utilisé  |
| Playwright   | Latest  | Tests end-to-end                        | 🚧 Planifié |
| pnpm         | 10+     | Package manager avec support workspaces | ✅ Utilisé  |
| ESLint       | Latest  | Linting du code                         | ✅ Utilisé  |
| Prettier     | Latest  | Formatting du code                      | ✅ Utilisé  |

## Key Architectural Decisions

### 1. Clean Architecture

- 🔄 Séparation stricte des couches (UI, Application, Domain, Infrastructure)
- 🔄 Dépendances orientées vers l'intérieur
- 🔄 Inversion de dépendance pour les repositories

### 2. Domain-Driven Design

- 📦 Organisation par bounded contexts (CV, Export, User)
- 💎 Entités riches avec logique métier encapsulée
- 💠 Value Objects pour les types complexes (Email, Phone)
- 📋 Agrégats pour maintenir la cohérence (Resume)
- 🔌 Interfaces de ports explicites dans chaque bounded context

### 3. Monorepo Structure

- 📂 Packages indépendants avec responsabilités claires
- 🔄 Shared utilities pour la réutilisation
- 🧪 Tests co-localisés avec le code

### 4. Validation Strategy

- ✅ Validation de schéma avec Zod
- 🔄 Composables spécialisés pour la validation des formulaires
- 📝 Validation en temps réel avec feedback utilisateur
- 🔀 Séparation entre validation UI et validation domaine

## Project Structure

```
/
├── packages/                    # Monorepo workspace
│   ├── core/                   # Domain & Application layers
│   │   └── src/
│   │       ├── cv/              # CV Bounded Context
│   │       │   ├── domain/      # Domain layer
│   │       │   │   ├── entities/   # Domain entities
│   │       │   │   │   └── Resume.ts
│   │       │   │   └── value-objects/ # Value Objects
│   │       │   │       ├── Email.ts
│   │       │   │       └── Phone.ts
│   │       │   ├── application/ # Application layer
│   │       │   │   └── use-cases/  # Business use cases
│   │       │   │       └── ManageResume.ts
│   │       │   └── ports/       # Interface ports
│   │       │       └── repositories/
│   │       │           └── ResumeRepository.ts
│   │       ├── export/          # Export Bounded Context
│   │       │   ├── domain/
│   │       │   │   └── entities/
│   │       │   │       └── ExportFormat.ts
│   │       │   ├── application/
│   │       │   │   └── use-cases/
│   │       │   │       └── ExportResume.ts
│   │       │   └── ports/
│   │       │       └── services/
│   │       │           └── ExportService.ts
│   │       ├── user/            # User Bounded Context
│   │       │   ├── domain/
│   │       │   │   └── entities/
│   │       │   │       └── User.ts
│   │       │   ├── application/
│   │       │   │   └── use-cases/
│   │       │   │       └── ManageUserPreferences.ts
│   │       │   └── ports/
│   │       │       └── repositories/
│   │       │           └── UserRepository.ts
│   │       └── shared/          # Shared domain elements
│   │           ├── domain/
│   │           │   ├── errors/
│   │           │   │   └── ValidationError.ts
│   │           │   └── value-objects/
│   │           │       └── Result.ts
│   │           └── application/
│   │               └── interfaces/
│   ├── ui/                    # Presentation layer
│   │   └── src/
│   │       ├── components/    # Vue components
│   │       │   └── shared/    # Shared components
│   │       │       └── form/  # Form components
│   │       │           ├── Form.vue    # Composant formulaire
│   │       │           └── FormField.vue # Champ de formulaire
│   │       ├── modules/       # Feature modules
│   │       │   └── cv/       # CV module
│   │       │       └── presentation/
│   │       │           ├── components/   # Composants de présentation
│   │       │           │   ├── BasicsForm.vue # Formulaire informations de base
│   │       │           │   └── __tests__/   # Tests co-localisés
│   │       │           ├── composables/   # Logique réutilisable
│   │       │           │   ├── useCVFieldValidation.ts # Validation spécifique CV
│   │       │           │   ├── useModelUpdate.ts # Gestion des modèles
│   │       │           │   └── __tests__/  # Tests des composables
│   │       │           └── stores/      # Stores Pinia
│   │       │               └── resume.ts  # Store principal
│   │       └── App/       # Application root
│   │           └── App.vue  # Composant principal
│   ├── infrastructure/        # Infrastructure layer
│   │   └── src/
│   │       ├── repositories/  # Data persistence
│   │       │   └── LocalStorageResumeRepository.ts # Stockage local
│   │       └── services/     # External services
│   └── shared/               # Shared utilities
│       └── src/
│           ├── types/        # Shared TypeScript types
│           │   └── resume.interface.ts # Interfaces partagées
│           └── validators/   # Shared validation schemas
│               └── resumeSchema.ts # Schémas Zod
```

## Package Responsibilities

### Core (@cv-generator/core)

- Organisation en bounded contexts DDD:
  - **CV Context**: Entités de CV, logique métier, validation
  - **Export Context**: Formats d'export, gestion des conversions
  - **User Context**: Gestion utilisateur, préférences
  - **Shared**: Utilities partagées (Result, ValidationError)
- Interfaces de ports explicites pour l'inversion de dépendance
- Alias TypeScript par contexte métier (@core/cv/_, @core/export/_, etc.)

### UI (@cv-generator/ui)

- Composants Vue.js et composables
- Gestion d'état avec Pinia
- Styles avec Tailwind CSS
- Tests unitaires co-localisés

### Infrastructure (@cv-generator/infrastructure)

- Implémentation des repositories
- Services externes et adapters
- Persistence des données (LocalStorage)

### Shared (@cv-generator/shared)

- Types et utilitaires partagés
- Schémas de validation
- Interfaces communes

## Coding Standards

### TypeScript & Type Safety

- NEVER use any type without explicit justification
- NEVER use non-suffixed interfaces or types
- NEVER mutate entity state directly
- NEVER expose internal implementation details
- NEVER use barrel files (index.ts)
- ALWAYS use proper type suffixes
- ALWAYS validate data at boundaries
- ALWAYS use immutable patterns
- ALWAYS document public APIs
- ALWAYS import directly from source files

### Testing Strategy

- TDD as primary approach
- Tests MUST be co-located with the code they test
- Each public method or component MUST have tests
- Use factory methods for test data
- Mock external dependencies
- Test files MUST follow the naming pattern `*.spec.ts` or `*.test.ts`

## Visualisation de l'architecture

Pour visualiser l'architecture complète du projet, y compris les diagrammes détaillés sur:

- L'architecture système
- Les bounded contexts
- Le flux de données
- Le flux de validation

Veuillez consulter le document complet [ARCHITECTURE.md](mdc:ARCHITECTURE.md) qui contient des diagrammes détaillés et des explications approfondies.
