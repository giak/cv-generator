---
description: ENFORCE Tailwind CSS v4 standards and best practices in Vue 3 components to ensure consistent, maintainable, and performant UI
globs: src/**/*.{vue,ts,js}
alwaysApply: false
---
---
description: ENFORCE Tailwind CSS v4 standards and best practices in Vue 3 components to ensure consistent, maintainable, and performant UI
globs: ["packages/ui/**/*.vue", "packages/ui/**/*.css"]
tags: ["vue", "tailwind", "ui", "css"]
priority: 1
version: 1.2.0
---

# Tailwind CSS v4 with Vue 3 Standards

## Context
- Applied when creating or modifying Vue 3 components in the UI package
- Ensures consistent design implementation using Tailwind CSS v4
- Enforces component-based architecture with Tailwind utility classes
- Maintains design system compliance through custom Tailwind configuration
- Optimizes for production with proper build setup

## Project Setup

### Installation and Configuration
```bash
# Install dependencies in the UI package
pnpm add -w tailwindcss @tailwindcss/vite

# Install recommended plugins
pnpm add -w @tailwindcss/forms @tailwindcss/typography @tailwindcss/aspect-ratio
```

### Monorepo Structure
```
packages/
├── ui/                      # UI Package
│   ├── src/
│   │   ├── assets/
│   │   │   └── styles/
│   │   │       ├── main.css    # Main CSS with Tailwind
│   │   │       └── themes/     # Theme configurations
│   │   ├── modules/
│   │   │   └── cv/
│   │   │       └── presentation/
│   │   │           └── components/  # Module-specific components
│   │   └── components/
│   │       └── shared/         # Shared UI components
│   ├── vite.config.ts         # Vite configuration
│   └── tailwind.config.ts     # Tailwind configuration
└── shared/                    # Shared package
    └── src/
        └── types/             # Shared TypeScript types
```

## Configuration Files

### Vite Configuration (packages/ui/vite.config.ts)
```typescript
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    vue(),
    tailwindcss()
  ],
  resolve: {
    alias: {
      '@cv': resolve(__dirname, './src/modules/cv'),
      '@shared': resolve(__dirname, './src/components/shared')
    }
  }
})
```

### Main CSS File (packages/ui/src/assets/styles/main.css)
```css
@import "tailwindcss";

/* Custom base styles */
@layer base {
  :root {
    /* Use oklch for better color science */
    --color-primary-500: oklch(65% 0.2 142);
    --color-primary-400: oklch(70% 0.19 142);
    /* ... other shades */
  }
}

/* Custom components */
@layer components {
  .btn-primary {
    /* CORRECT: Use @apply only for non-color utilities */
    @apply inline-flex items-center justify-center px-4 py-2 rounded-md;
    /* CORRECT: Use CSS variables for colors */
    background-color: var(--color-primary-500);
    color: white;
  }
  .btn-primary:hover {
    background-color: var(--color-primary-400);
  }
}
```

## CSS Variables Usage

### Correct Syntax
- ALWAYS use `var()` function when referencing CSS variables in Tailwind classes
- Format: `class="bg-[var(--color-name)]"`
- Apply to all color utilities (bg, text, border, ring, etc.)

```vue
<!-- ✅ Correct Usage -->
<div class="bg-[var(--color-primary-500)] text-[var(--color-neutral-900)]">
  <p class="border-[var(--color-neutral-200)]">Content</p>
</div>

<!-- ❌ Incorrect Usage -->
<div class="bg-[--color-primary-500] text-[--color-neutral-900]">
  <p class="border-[--color-neutral-200]">Content</p>
</div>
```

### Variable Definition
```css
/* Custom base styles */
@layer base {
  :root {
    /* Use oklch for better color science */
    --color-primary-500: oklch(65% 0.2 142);
    --color-primary-400: oklch(70% 0.19 142);
  }
}
```

## Critical Rules
<critical>
- NEVER use CSS variables without var() function in Tailwind classes
- NEVER use direct color values, use CSS custom properties with var()
- NEVER use @apply with color utilities
- ALWAYS use var() syntax when referencing CSS variables
- ALWAYS format as bg-[var(--color-name)]
- ALWAYS use CSS variables for theming
- ALWAYS use modern color formats (oklch)
- ALWAYS test color contrast with var() syntax
- ALWAYS follow consistent var() syntax across components
</critical>

## Examples

<example>
// Good Implementation with var() syntax
<template>
  <div class="rounded-lg bg-[var(--color-neutral-50)] p-6">
    <h2 class="text-2xl font-semibold text-[var(--color-primary-500)]">
      Title
    </h2>
    <button class="bg-[var(--color-primary-500)] hover:bg-[var(--color-primary-400)]">
      Action
    </button>
  </div>
</template>
</example>

<example type="invalid">
// Poor Implementation - Avoid
<template>
  <div class="rounded-lg bg-[--color-neutral-50] p-6">
    <!-- INCORRECT: Missing var() syntax -->
    <h2 class="text-2xl font-semibold text-[--color-primary-500]">
      Title
    </h2>
    <button class="bg-[--color-primary-500] hover:bg-[--color-primary-400]">
      Action
    </button>
  </div>
</template>
</example>

## Component Requirements

### Base Component Structure
- Use `<script setup lang="ts">` for composition API
- Define proper TypeScript interfaces for props
- Implement proper event handling with typed emits
- Use Tailwind utility classes with proper var() syntax
- Follow atomic design principles
- Import types from shared package

### Styling Guidelines
- Use Tailwind utility classes as primary styling method
- Use `var()` syntax for all CSS variable references
- Group utility classes in logical order:
  1. Layout (display, position)
  2. Box Model (margin, padding)
  3. Typography
  4. Visual (colors with var() syntax)
  5. Interactive States

## Theme System
- Use CSS custom properties with var() syntax
- Implement color schemes with proper var() references
- Support high contrast mode
- Use modern color formats (oklch, color-mix)

## Performance Optimization
- Use modern CSS features
- Implement proper view transitions
- Use container queries for modularity
- Optimize for Core Web Vitals
- Use CSS variables with var() syntax for dynamic values

## Accessibility Requirements
- Maintain WCAG 2.2 AAA compliance
- Support reduced-motion preferences
- Test color contrasts with var() syntax
- Support forced-colors mode
- Test with screen readers
- Support keyboard navigation
- Implement proper focus management
- Support high contrast mode