---
title: "Architecture Documentation Standards"
version: "2.0.0"
description: "ALWAYS use when CREATING or UPDATING an Architecture document to ENSURE consistent documentation of architectural decisions"
globs: "**/arch*.md"
lastUpdated: "2024-02-28"
tags: ["architecture", "design", "technical", "documentation"]
---

# üìê R√®gles de Documentation d'Architecture

## üìã Vue d'Ensemble
Cette r√®gle d√©finit les standards pour la cr√©ation et la mise √† jour des documents d'architecture. Elle assure que toutes les d√©cisions d'architecture sont document√©es de mani√®re claire, compl√®te et coh√©rente, facilitant la compr√©hension du syst√®me et sa maintenance √† long terme.

> ‚ö†Ô∏è **Attention**: Le document d'architecture est crucial pour la compr√©hension technique du projet et doit √™tre approuv√© avant le d√©but de l'impl√©mentation.

## üéØ Objectifs
- Assurer une documentation claire et coh√©rente des d√©cisions d'architecture
- Garantir que toutes les sections techniques essentielles sont incluses
- Faciliter la compr√©hension du syst√®me pour tous les membres de l'√©quipe
- Fournir une r√©f√©rence pour les futures d√©cisions techniques
- Maintenir une trace des changements architecturaux au fil du temps

## ‚úÖ Requirements

- Documenter clairement les d√©cisions d'architecture
- Suivre la structure standardis√©e pour les documents d'architecture
- Inclure toutes les sections requises d√©taill√©es ci-dessous
- Utiliser des diagrammes Mermaid pour visualiser l'architecture
- Maintenir un historique des changements (Changelog)
- Justifier les choix technologiques et architecturaux
- Documenter les alternatives consid√©r√©es et les raisons de leur non-s√©lection
- Utiliser une terminologie coh√©rente dans tout le document

## üìù Structure du Document d'Architecture

### 1Ô∏è‚É£ M√©ta-informations
- Titre: "Architecture pour {projet}"
- Statut: Draft / Approved
- Version: X.Y.Z
- Date de mise √† jour
- Auteur(s)
- Approbateurs

### 2Ô∏è‚É£ R√©sum√© Technique
Un r√©sum√© concis de l'approche architecturale, incluant:
- Vision technique g√©n√©rale
- Principes directeurs
- Contraintes principales

### 3Ô∏è‚É£ Stack Technologique
Une table d√©taill√©e listant les technologies choisies avec justifications:
- Backend
- Frontend
- Base de donn√©es
- Infrastructure
- CI/CD
- Monitoring

### 4Ô∏è‚É£ Architecture Globale
Pr√©sentation de l'architecture globale avec:
- Diagramme Mermaid illustrant la structure
- Explication des interactions entre composants
- Description des flux de donn√©es principaux
- Patterns architecturaux adopt√©s

### 5Ô∏è‚É£ Composants Principaux
Pour chaque composant majeur:
- Nom et objectif
- Responsabilit√©s
- Interfaces
- D√©pendances
- Consid√©rations sp√©ciales

### 6Ô∏è‚É£ Int√©grations Externes
Pour chaque syst√®me externe:
- Nom du syst√®me
- Type d'int√©gration
- Protocole de communication
- Flux de donn√©es
- Consid√©rations sp√©cifiques

### 7Ô∏è‚É£ Consid√©rations Techniques
Sections d√©taill√©es sur:
- S√©curit√©
- Performance
- Scalabilit√©
- R√©silience
- Monitoring

### 8Ô∏è‚É£ Annexes
- D√©cisions d'Architecture (ADRs)
- Diagrammes suppl√©mentaires
- R√©f√©rences techniques
- Glossaire

## üí° Exemples

<example>
**Bon exemple de section d'Architecture Globale**:

```markdown
## 4. Architecture Globale

Notre syst√®me adopte une architecture microservices avec des pr√©occupations s√©par√©es par domaine m√©tier. Chaque service est d√©ploy√© ind√©pendamment et communique via des API REST bien d√©finies.

```mermaid
graph TD
    A[Client Web/Mobile] --> B[API Gateway]
    B --> C[Service d'Authentification]
    B --> D[Service de Gestion Utilisateurs]
    B --> E[Service de Traitement de Commandes]
    B --> F[Service de Paiement]
    C -.-> G[(Base de donn√©es Auth)]
    D -.-> H[(Base de donn√©es Utilisateurs)]
    E -.-> I[(Base de donn√©es Commandes)]
    F -.-> J[Passerelle de Paiement Externe]
    E --> K[File d'attente Notifications]
    K --> L[Service de Notifications]
    L --> M[Syst√®me d'Emails]
    L --> N[Service Push]
```

### Flux de donn√©es principaux
1. Les clients interagissent avec l'application via l'API Gateway
2. Toutes les requ√™tes sont d'abord authentifi√©es par le Service d'Authentification
3. Les commandes cr√©√©es sont stock√©es puis ajout√©es √† une file d'attente pour traitement asynchrone
4. Les notifications sont envoy√©es aux utilisateurs √† chaque √©tape importante

### Pattern architecturaux
- **API Gateway**: Point d'entr√©e unique qui route les requ√™tes et g√®re les pr√©occupations transversales
- **Microservices**: Services ind√©pendants avec responsabilit√©s clairement d√©finies
- **Event-Driven**: Communication asynchrone via files d'attente pour les op√©rations non-critiques
- **CQRS**: S√©paration des op√©rations de lecture et d'√©criture pour les services √† forte charge

Cette architecture assure scalabilit√©, r√©silience et permet des d√©ploiements ind√©pendants de chaque composant.
```

Ce document pr√©sente clairement l'architecture avec un diagramme Mermaid bien structur√©, explique les flux de donn√©es et d√©taille les patterns utilis√©s avec leurs avantages.
</example>

<example type="invalid">
**Exemple √† √©viter**:

```markdown
## Architecture

Le syst√®me utilisera une architecture de type microservices. Il y aura plusieurs services comme l'authentification, les utilisateurs et les commandes. Ils communiqueront entre eux par des APIs.

[Ins√©rer diagramme]

Nous utiliserons des bases de donn√©es s√©par√©es pour chaque service.
```

Cette section est trop vague, ne contient pas de diagramme r√©el, n'explique pas les flux de donn√©es ou les patterns architecturaux, et ne justifie pas les choix effectu√©s.
</example>

## ‚úÖ Bonnes Pratiques

- **Clart√©**: Utilisez un langage pr√©cis et √©vitez le jargon inutile
- **Diagrammes**: Utilisez des diagrammes Mermaid pour visualiser l'architecture
- **Justifications**: Expliquez toujours le "pourquoi" derri√®re chaque d√©cision
- **Niveau de d√©tail**: Trouvez l'√©quilibre entre trop et trop peu de d√©tails
- **Consistance**: Utilisez une terminologie coh√©rente dans tout le document
- **√âvolution**: Traitez le document comme vivant, √† mettre √† jour au fil du projet
- **Structure**: Suivez la structure hi√©rarchique recommand√©e
- **Validation**: Faites valider par des pairs avant l'approbation finale

## üîó R√©f√©rences
- [Template d'Architecture](mdc:xnotes/template-arch-standardized.md)
- [C4 Model pour la visualisation d'architecture](https://c4model.com/)
- [Architectural Decision Records (ADR)](https://adr.github.io/)

<version>2.0.0</version> 