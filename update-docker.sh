#!/bin/bash

# Script pour mettre √† jour l'application CV Generator en environnement Docker
# Ce script permet de mettre √† jour l'application vers la derni√®re version de mani√®re s√©curis√©e

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©. Veuillez l'installer avant de continuer.${NC}"
    echo "üëâ https://docs.docker.com/get-docker/"
    exit 1
fi

# V√©rifier si Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√©. Veuillez l'installer avant de continuer.${NC}"
    echo "üëâ https://docs.docker.com/compose/install/"
    exit 1
fi

# V√©rifier si Git est install√©
if ! command -v git &> /dev/null; then
    echo -e "${RED}‚ùå Git n'est pas install√©. Veuillez l'installer avant de continuer.${NC}"
    exit 1
fi

# Variables
BACKUP_DIR="./backups/$(date +%Y%m%d_%H%M%S)"
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
TARGET_BRANCH=${1:-"main"}
ENV_MODE=${2:-"production"} # production ou development

echo -e "${BLUE}üîÑ CV Generator - Mise √† jour Docker${NC}"
echo "--------------------------------------------------------------"
echo -e "${YELLOW}Branche actuelle : ${CURRENT_BRANCH}${NC}"
echo -e "${YELLOW}Branche cible    : ${TARGET_BRANCH}${NC}"
echo -e "${YELLOW}Mode             : ${ENV_MODE}${NC}"

# Demander confirmation
echo
echo -e "${YELLOW}‚ö†Ô∏è Cette op√©ration va mettre √† jour l'application vers la derni√®re version.${NC}"
echo -e "${YELLOW}‚ö†Ô∏è Un backup des donn√©es sera effectu√© avant la mise √† jour.${NC}"
read -p "Voulez-vous continuer? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}Mise √† jour annul√©e.${NC}"
    exit 0
fi

# Cr√©er le r√©pertoire de backup
mkdir -p "$BACKUP_DIR"
echo -e "${BLUE}üìÅ R√©pertoire de backup cr√©√© : ${BACKUP_DIR}${NC}"

# Sauvegarder le fichier .env s'il existe
if [ -f .env ]; then
    echo -e "${BLUE}üíæ Sauvegarde du fichier .env...${NC}"
    cp .env "${BACKUP_DIR}/.env.backup"
    echo -e "${GREEN}‚úÖ Fichier .env sauvegard√©${NC}"
fi

# Sauvegarder les donn√©es utilisateur (si elles existent)
echo -e "${BLUE}üíæ Sauvegarde des donn√©es utilisateur...${NC}"
if [ -d data ]; then
    tar -czf "${BACKUP_DIR}/data.tar.gz" data
    echo -e "${GREEN}‚úÖ Donn√©es utilisateur sauvegard√©es${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Aucun r√©pertoire de donn√©es trouv√©${NC}"
fi

# Arr√™ter les conteneurs Docker
echo -e "${BLUE}üõë Arr√™t des conteneurs Docker...${NC}"
docker-compose down
echo -e "${GREEN}‚úÖ Conteneurs arr√™t√©s${NC}"

# Sauvegarder les images Docker actuelles
echo -e "${BLUE}üíæ Sauvegarde des images Docker actuelles (tags)...${NC}"
docker images | grep "cv-generator" | awk '{print $1 ":" $2}' > "${BACKUP_DIR}/docker_images.txt"
echo -e "${GREEN}‚úÖ Liste des images sauvegard√©e${NC}"

# Afficher l'√©tat actuel du Git
echo -e "${BLUE}üìä √âtat Git actuel :${NC}"
git status --short

# V√©rifier s'il y a des modifications locales
if [[ $(git status --porcelain) ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è Des modifications locales ont √©t√© d√©tect√©es.${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è La mise √† jour pourrait √©craser ces modifications.${NC}"
    read -p "Voulez-vous stasher ces modifications? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üì¶ Stash des modifications locales...${NC}"
        git stash save "Modifications avant mise √† jour $(date)"
        echo -e "${GREEN}‚úÖ Modifications locales sauvegard√©es dans le stash${NC}"
    else
        echo -e "${RED}‚ùå La mise √† jour n√©cessite un d√©p√¥t Git propre.${NC}"
        echo -e "${RED}‚ùå Veuillez commiter ou stasher vos modifications avant de continuer.${NC}"
        exit 1
    fi
fi

# Mettre √† jour le code source
echo -e "${BLUE}üîÑ Mise √† jour du code source...${NC}"
git fetch origin

# V√©rifier si la branche cible existe
if ! git show-ref --verify --quiet refs/remotes/origin/"$TARGET_BRANCH"; then
    echo -e "${RED}‚ùå La branche '$TARGET_BRANCH' n'existe pas sur le d√©p√¥t distant.${NC}"
    exit 1
fi

# Si on est sur une autre branche que celle cibl√©e, basculer
if [[ "$CURRENT_BRANCH" != "$TARGET_BRANCH" ]]; then
    echo -e "${BLUE}üîÑ Basculement vers la branche '$TARGET_BRANCH'...${NC}"
    git checkout "$TARGET_BRANCH"
    echo -e "${GREEN}‚úÖ Basculement effectu√©${NC}"
fi

# Tirer les derni√®res modifications
echo -e "${BLUE}üîÑ R√©cup√©ration des derni√®res modifications...${NC}"
git pull origin "$TARGET_BRANCH"
echo -e "${GREEN}‚úÖ Code source mis √† jour${NC}"

# V√©rifier si le fichier .env existe toujours
if [ ! -f .env ] && [ -f "${BACKUP_DIR}/.env.backup" ]; then
    echo -e "${BLUE}üîÑ Restauration du fichier .env...${NC}"
    cp "${BACKUP_DIR}/.env.backup" .env
    echo -e "${GREEN}‚úÖ Fichier .env restaur√©${NC}"
elif [ ! -f .env ] && [ -f .env.example ]; then
    echo -e "${BLUE}üîÑ Cr√©ation d'un nouveau fichier .env √† partir de .env.example...${NC}"
    cp .env.example .env
    echo -e "${YELLOW}‚ö†Ô∏è Un nouveau fichier .env a √©t√© cr√©√©. Veuillez le configurer.${NC}"
fi

# Mettre les scripts √† jour
echo -e "${BLUE}üîÑ Mise √† jour des permissions des scripts...${NC}"
chmod +x start.sh test-docker.sh docker-cleanup.sh dev-environment.sh update-docker.sh
echo -e "${GREEN}‚úÖ Permissions mises √† jour${NC}"

# Reconstruire les conteneurs Docker
echo -e "${BLUE}üèóÔ∏è Reconstruction des conteneurs Docker...${NC}"
docker-compose build
echo -e "${GREEN}‚úÖ Conteneurs reconstruits${NC}"

# D√©marrer l'application
echo -e "${BLUE}üöÄ D√©marrage de l'application...${NC}"
if [[ "$ENV_MODE" == "development" ]]; then
    ./start.sh development
else
    ./start.sh
fi
echo -e "${GREEN}‚úÖ Application d√©marr√©e${NC}"

# Afficher les informations de version
echo -e "${BLUE}üìã Informations sur la version :${NC}"
echo -e "${YELLOW}Branche      : ${TARGET_BRANCH}${NC}"
echo -e "${YELLOW}Commit       : $(git rev-parse HEAD)${NC}"
echo -e "${YELLOW}Date du commit : $(git log -1 --format=%cd --date=local)${NC}"
echo -e "${YELLOW}Auteur       : $(git log -1 --format=%an)${NC}"
echo -e "${YELLOW}Message      : $(git log -1 --format=%s)${NC}"

echo
echo -e "${GREEN}‚úÖ Mise √† jour termin√©e avec succ√®s !${NC}"
echo -e "${BLUE}‚ÑπÔ∏è L'application est maintenant √† jour et en cours d'ex√©cution.${NC}"
echo -e "${BLUE}‚ÑπÔ∏è Backup disponible dans : ${BACKUP_DIR}${NC}"
exit 0 